{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.11"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":12471054,"sourceType":"datasetVersion","datasetId":7867862},{"sourceId":12478127,"sourceType":"datasetVersion","datasetId":7873089}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true},"colab":{"gpuType":"T4","provenance":[]},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"002ab4272ff34344bd983cd2bcd0e9ee":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a6b7562396d349998576b90bc97f55ed","placeholder":"​","style":"IPY_MODEL_34c7edfe77404feab108aeeb483c54c3","value":"Epoch 16: 100%"}},"0123659f56c544c4847d2849c5c42bf1":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"027ce4fad9884e34801e3809862cd3fa":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":"hidden","width":null}},"027f8877f8734a2c83b0fae888240fbd":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"04ed05705f424796b34cd1b7aaa97060":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_5fb91afe71054cdca16fda4981f607eb","placeholder":"​","style":"IPY_MODEL_a58d4649f482451cb9e643d64df0ae09","value":"Epoch 6: 100%"}},"0c7e135ec45b48999ab80e74767306d2":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_1e505002abc44be6bdb9031027cf7ff8","max":1000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_fdf125bfed6149c2b6a752e7322ee376","value":1000}},"0ce9670583664a1e99b52fa8cc6baf75":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0dfc33ffd0f8494680472579dcbc03bd":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a22fd5267fff4fceaad020d676d1d001","placeholder":"​","style":"IPY_MODEL_b511aafee1124d91809f54e719d0cf6a","value":"Training Progress: 100%"}},"0f1fc0650c0d46a78ef7c5fe782b007b":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"0f7cf59c3d8143d9aa4803c69239b745":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_de7f69fec71f4030a74a1ce6e8a6e539","placeholder":"​","style":"IPY_MODEL_32c5e01fd1194aab9ad85ae4105731b1","value":"Epoch 12: 100%"}},"10a126fc30c44de0904de3c07aaf1926":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1119a194972a48c0ab0bb7d2dd25c5ed":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_7d756e58bdb443808351a635e5400e48","IPY_MODEL_b0c34be31c1d49ee9a94c0b84278d6e9","IPY_MODEL_afdb896e821a4a20821fc9655491fb69"],"layout":"IPY_MODEL_3996566471844880a9777f37f089a56b"}},"116e4b2f7ce642be98d76e6008921b5a":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"127bb77f7877481a91bd426d6360fe87":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":"hidden","width":null}},"13a6220857b940e4981900e9ff0438ce":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1610cb2b9e9f4f2fa831ec496229c164":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_22361df0f8f84b10bd9ba5a7d40a650b","placeholder":"​","style":"IPY_MODEL_ff7f60dfa58342208542887c3416d5be","value":"Epoch 3: 100%"}},"165e812fc9f34e7e9917a63c635d91e6":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"17d2ed77d5584c1e93e73383f855408f":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_5ca6417bdbd247acb07124de2537b7df","placeholder":"​","style":"IPY_MODEL_a4ae0c3aa49d4bad8d234b4cc6b0d8cd","value":" 999/1000 [01:20&lt;00:00, 11.82it/s, Loss=0.0468]"}},"1820352e7782407b86c5364d75405ccb":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_002ab4272ff34344bd983cd2bcd0e9ee","IPY_MODEL_506086a90df0415199bbd7f53ad1771d","IPY_MODEL_99c80e3f01034cc9bcadf783d4095135"],"layout":"IPY_MODEL_ce2721ab0fb141fcae4c9addabed1175"}},"1aab7f8969b4470bb802b533734cc544":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_bf4380c708d742ce94c2954afcb55a89","IPY_MODEL_c9eca82ed0fc4428a9ee1219e03a436b","IPY_MODEL_f946ad05ec7b4b3d9b9f172d7b4d300d"],"layout":"IPY_MODEL_38f26e0bcd0b4912a663d571b6e4508d"}},"1bb0382a4ffe42d0aba5402402e1db01":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_5312f8e0555544b48c858375b290ba36","max":1000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_98befeebf8244ad397e281821b6f2c1c","value":1000}},"1e505002abc44be6bdb9031027cf7ff8":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1fe26c1898d64f56b0257005303d6457":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d34aedf870014f72b1f487a65a5cfa4e","placeholder":"​","style":"IPY_MODEL_116e4b2f7ce642be98d76e6008921b5a","value":" 998/1000 [01:18&lt;00:00, 13.35it/s, Loss=0.0422]"}},"202323e1a59e44888f8aca0041c89c58":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_ca43e8a26e28415d8d7ababbea6708b5","IPY_MODEL_0c7e135ec45b48999ab80e74767306d2","IPY_MODEL_fc483bf83e1f4ea7bd39e7fced6ec7ce"],"layout":"IPY_MODEL_6d32d0044a5948a6820678825ce03fdc"}},"213948be6f6c4660bc97f0cc9f953a91":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"21ae14ec8c4e459887fa65b899698e1b":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_771952935eb0498099f7e0c36261d4d4","IPY_MODEL_4454cd61ef7841179a0b230974e15f07","IPY_MODEL_fea35edfc80e45d4b6d743609dabcf23"],"layout":"IPY_MODEL_871eb867c8904f53baf93eed25d409c3"}},"22361df0f8f84b10bd9ba5a7d40a650b":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"230879dc4fb64d27af96469a86ca14b6":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":"hidden","width":null}},"2acff6a5b3004586bc50dd0fd4563c97":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":"hidden","width":null}},"2c8823ea69da440f91814657938c8a00":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2d4f22c26e464403ba7bb9d32d3aeaa1":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2d860b45d2d648e4a6fe5729ac1ae8f4":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"31287ca0b2884488aa37cbd0e15cc7a5":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"32c5e01fd1194aab9ad85ae4105731b1":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"33579d8933f4418aa68d9b75d9a6d98f":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3422ee026f0c42ffac701c4f5b8019e9":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_2d860b45d2d648e4a6fe5729ac1ae8f4","placeholder":"​","style":"IPY_MODEL_0123659f56c544c4847d2849c5c42bf1","value":" 999/1000 [01:16&lt;00:00, 13.28it/s, Loss=0.0343]"}},"34c7edfe77404feab108aeeb483c54c3":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"34e77af347c34d91b0f37b742fd5da2b":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a607f89665164cb4b0fe428fbdd4b737","placeholder":"​","style":"IPY_MODEL_d8ded99e868140b4aa844a1d782ad7e2","value":"Epoch 4: 100%"}},"3564545ae1e1482c881e6d2ca80bdf77":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"364c6531049346579731eb519dff0c8d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"38db0f3a62014c1992c4c43faa5d0e30":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_52c9901210ac4801ade58c318cb21ca4","IPY_MODEL_cb6de93595944f2eaeb67212c50a63f6","IPY_MODEL_b93c34029fde41eab7dc9780949bbf53"],"layout":"IPY_MODEL_e11d5ed1aeba4c748a89bbd2b9fdd880"}},"38f26e0bcd0b4912a663d571b6e4508d":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":"hidden","width":null}},"3996566471844880a9777f37f089a56b":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":"hidden","width":null}},"3b989b1b5ddc4ec290019373b18e26b8":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_9ac0cce52d854a40a31f07b74b70f311","placeholder":"​","style":"IPY_MODEL_593c020a11964428b4df5d9bfc46e808","value":"Epoch 10: 100%"}},"3ba4c0a13ed34c96ba64b2009b2c1434":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_437d8abf2abc4ee49b80fbe5af10aa9a","placeholder":"​","style":"IPY_MODEL_501d834bcca24e62a09b72adc14c2946","value":"Epoch 5: 100%"}},"3cbbebf77d6d477688b053dac4ce4bb1":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f2a93e69d6944f3db650674aa122bdfc","placeholder":"​","style":"IPY_MODEL_6cf45a2756ef4677b0ebef4a00414e58","value":" 999/1000 [01:16&lt;00:00, 14.56it/s, Loss=0.0347]"}},"3cea1b54881d4cf6aa1b630ef0182c37":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"3e17a25ef0c0456ba62e1e28f5dc9fa2":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"3f2b0a1be8114d45966e6bce4cd54ce7":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4049931103e84e9689fbc7b6d8cf51ed":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"40880ef8f5a34d0aa38318c24b6dba93":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4117e89279f84980b92c066d5b54cd3d":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"427bd640e87248ac94d205ed6b88965a":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"434d414f8e2d4737a3e7d0387a40a727":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"437d8abf2abc4ee49b80fbe5af10aa9a":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4454cd61ef7841179a0b230974e15f07":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_fac84f13432f493384471c6d167692dd","max":1000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_bc15b89681504604bcad556e5dc8fe19","value":1000}},"447982e29c9e42168e6e85e7eec3ebce":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_d057e4365a7a42ed8cb85ceddb9574a7","max":1000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_4fe65eb670484e5f8167c666f946e74d","value":1000}},"490d35904bf340cdb3c79d1c4fd0dae1":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ffb05423c3544374a30cc7d42811c49d","placeholder":"​","style":"IPY_MODEL_539c32be991944618f25514169f0b6ad","value":" 1000/1000 [01:19&lt;00:00, 11.59it/s, Loss=0.0478]"}},"4c44887eccad487ba122dd62e7e3554c":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_af055e25954c45bdbf635d5ac75ee9a0","placeholder":"​","style":"IPY_MODEL_f210abfce5a8421d9aede204d0cf3639","value":" 998/1000 [01:17&lt;00:00, 13.18it/s, Loss=0.0385]"}},"4f0d239ac0624f9d8d97c5a3790350b6":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0ce9670583664a1e99b52fa8cc6baf75","placeholder":"​","style":"IPY_MODEL_027f8877f8734a2c83b0fae888240fbd","value":" 20/20 [1:20:24&lt;00:00, 84.94s/it, Train_Loss=0.0369, Val_Loss=0.0368, Train_Acc=0.9906, Val_Acc=0.9904]"}},"4f55a4bdd59f4f06a7c6f054f9a31b26":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"4fe65eb670484e5f8167c666f946e74d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"501d834bcca24e62a09b72adc14c2946":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"506086a90df0415199bbd7f53ad1771d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_7797331aceaa425ebba175e8cd49a89c","max":1000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_88afd2c8adfb4308bc8893dd70aaf677","value":1000}},"514df4728c1a47eda02a4919c28a52fa":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"522a941a581d44bea9afb6ffbb6acd9c":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_bbf6eb1f65ef44c996665fdd4c360f7c","max":1000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_514df4728c1a47eda02a4919c28a52fa","value":1000}},"52c9901210ac4801ade58c318cb21ca4":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_6952c442784f43f5b5fc92519a98458b","placeholder":"​","style":"IPY_MODEL_9e47ba0b2b754f00880c55cb41afcbb4","value":"Epoch 19: 100%"}},"5312f8e0555544b48c858375b290ba36":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"539c32be991944618f25514169f0b6ad":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"54fd426060024d2a98a8ebf4f7751467":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_213948be6f6c4660bc97f0cc9f953a91","max":1000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_ccff0c8ac48c4320a993f843f1dff408","value":1000}},"55675a57497248eebd8b040602961052":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_2c8823ea69da440f91814657938c8a00","max":1000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_e67aa1409fde45fea49fa8c1e577a200","value":1000}},"593c020a11964428b4df5d9bfc46e808":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"5953b8c8b45c4b48bf41b2f2b5e6375e":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_7157fba38b5748eea224b2b5f06a2d80","placeholder":"​","style":"IPY_MODEL_73e6a5c4a6054f178dfeebfe83de9514","value":" 998/1000 [01:16&lt;00:00, 12.32it/s, Loss=0.0465]"}},"5b4f3dd7e914438f968b77d9cf21cd78":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"5b6b0f16d37444dcaaa0c357d78b5c96":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"5bb3076b7bf44edbb12aada44d141b5c":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5c17beaa40db4c72ba80225d6a36a2bb":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_1610cb2b9e9f4f2fa831ec496229c164","IPY_MODEL_d7a9c18b61ba4006a78fffb6dc8087dc","IPY_MODEL_17d2ed77d5584c1e93e73383f855408f"],"layout":"IPY_MODEL_784e88cfcd5d4755aea4375347eeb3ee"}},"5ca6417bdbd247acb07124de2537b7df":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5fb91afe71054cdca16fda4981f607eb":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"64c5098cb60f4fdf9630eed573411127":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"6685000345f945b78be1a41d2bd92d8b":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_70d53f3219e94891aa8887f0f9ad27d5","placeholder":"​","style":"IPY_MODEL_ebb061ea487040618c9ecca43dcf2b1c","value":" 999/1000 [01:17&lt;00:00, 12.43it/s, Loss=0.0328]"}},"6952c442784f43f5b5fc92519a98458b":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6a947826fef741f0ae23b1a7817fc814":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"6a9c246749dc47c3b3259192aa38e5ae":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6c5a341f329a4b72808a5297ac165ce5":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_4117e89279f84980b92c066d5b54cd3d","max":1000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_165e812fc9f34e7e9917a63c635d91e6","value":1000}},"6cf45a2756ef4677b0ebef4a00414e58":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"6d25a08a95084ba9a4cfd7291169ce21":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"6d32d0044a5948a6820678825ce03fdc":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":"hidden","width":null}},"6db77b9a994441749dfc2d99a32c9535":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"6f9ff4ecc9904fa78236e0945f73ce56":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"70d53f3219e94891aa8887f0f9ad27d5":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7157fba38b5748eea224b2b5f06a2d80":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"72aebe1f96604f9c99deb10029560983":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"73e6a5c4a6054f178dfeebfe83de9514":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"749e7c42be5d4e378f86fec401d58a08":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_10a126fc30c44de0904de3c07aaf1926","max":1000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_fe51cfe1d7114fdf9ff98121c8de8937","value":1000}},"771952935eb0498099f7e0c36261d4d4":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_4049931103e84e9689fbc7b6d8cf51ed","placeholder":"​","style":"IPY_MODEL_a811d2dea2b044919439b57b43d42df0","value":"Epoch 2: 100%"}},"7770957224784738a68f47a0b4e9fee7":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_7b699cf7e2a94751a715020e278a4d82","IPY_MODEL_1bb0382a4ffe42d0aba5402402e1db01","IPY_MODEL_3cbbebf77d6d477688b053dac4ce4bb1"],"layout":"IPY_MODEL_d7b2b562383942e59560f4dbb7d36f03"}},"7797331aceaa425ebba175e8cd49a89c":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"784e88cfcd5d4755aea4375347eeb3ee":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":"hidden","width":null}},"7855d4683c074259af8bd14cf5870c32":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ed672051c1d24f92ad6300bcbe69146d","placeholder":"​","style":"IPY_MODEL_f6b1daece7a44d0eac19e11ac82bd687","value":"Epoch 8: 100%"}},"7b699cf7e2a94751a715020e278a4d82":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_5bb3076b7bf44edbb12aada44d141b5c","placeholder":"​","style":"IPY_MODEL_c2a88bd91401427b97d68bfc2abe2645","value":"Epoch 9: 100%"}},"7d756e58bdb443808351a635e5400e48":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_3564545ae1e1482c881e6d2ca80bdf77","placeholder":"​","style":"IPY_MODEL_3e17a25ef0c0456ba62e1e28f5dc9fa2","value":"Epoch 18: 100%"}},"7e276a4402e74011a1fe008cbbda7be7":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":"hidden","width":null}},"811ac91cf3b4497fa589c5d304f51cce":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"81512f78c4064a0bbaf60a1afd3de5ec":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_aedd00913dbf4d68a3b7e1a1b4aa9d17","IPY_MODEL_8f83ee5fd6394db6923156f670efddda","IPY_MODEL_5953b8c8b45c4b48bf41b2f2b5e6375e"],"layout":"IPY_MODEL_db588b19059847f5bd27e490fa0c4789"}},"85deafbf87c24a5c8d03f34929e46345":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"8709725076b64bfa91ff1c84f6b38e3f":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"871eb867c8904f53baf93eed25d409c3":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":"hidden","width":null}},"88afd2c8adfb4308bc8893dd70aaf677":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"8b19693ed2d142878bc9f55cee064f23":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_6f9ff4ecc9904fa78236e0945f73ce56","max":1000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_364c6531049346579731eb519dff0c8d","value":1000}},"8d0ecb1e89f94cf5aeb85418ea2ef8e2":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_c7515a5e98ec44978935a1174ca719d5","placeholder":"​","style":"IPY_MODEL_72aebe1f96604f9c99deb10029560983","value":" 1000/1000 [01:14&lt;00:00, 15.14it/s, Loss=0.0407]"}},"8e78d2bf9db94d48ad7f8ef4511ec85a":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8f83ee5fd6394db6923156f670efddda":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_33579d8933f4418aa68d9b75d9a6d98f","max":1000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_cbc1648b5f87422bb04634bccc4dfae5","value":1000}},"90dad9f767b548ca953ee2f5d1466212":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"914f575a466947558cafec0197926eb5":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ab329e899c83449c99d76e5060bb9045","placeholder":"​","style":"IPY_MODEL_a9953580f40949faa1c045d41d86f831","value":"Epoch 13: 100%"}},"9201c7c60c204db6afa16d11af54058d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_0dfc33ffd0f8494680472579dcbc03bd","IPY_MODEL_e6bb160e7e544503abb7240c310031f2","IPY_MODEL_4f0d239ac0624f9d8d97c5a3790350b6"],"layout":"IPY_MODEL_811ac91cf3b4497fa589c5d304f51cce"}},"929750ec0780441aab6c1f027024b250":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"951bd0d350fa486eab12d0bfa346b50e":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"98befeebf8244ad397e281821b6f2c1c":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"99c48ae44aa244f3b1e3c1eebcccad3a":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":"hidden","width":null}},"99c80e3f01034cc9bcadf783d4095135":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d7ba51c69d3f435098208f97614ff7d4","placeholder":"​","style":"IPY_MODEL_4f55a4bdd59f4f06a7c6f054f9a31b26","value":" 998/1000 [01:17&lt;00:00, 14.25it/s, Loss=0.0391]"}},"9ac0cce52d854a40a31f07b74b70f311":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9e47ba0b2b754f00880c55cb41afcbb4":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a22fd5267fff4fceaad020d676d1d001":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a299f60a8ada41208fc710230605154b":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a404b92bd10d45a59860231b0bcae9e3":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"a4ae0c3aa49d4bad8d234b4cc6b0d8cd":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a58d4649f482451cb9e643d64df0ae09":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a607f89665164cb4b0fe428fbdd4b737":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a62a6bbec072499f995e4f283f8626ef":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_0f7cf59c3d8143d9aa4803c69239b745","IPY_MODEL_cab87bfebc0b4691adb41068c1cefda9","IPY_MODEL_1fe26c1898d64f56b0257005303d6457"],"layout":"IPY_MODEL_ba80c523a61b44c793c4392c9374af81"}},"a6b7562396d349998576b90bc97f55ed":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a811d2dea2b044919439b57b43d42df0":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a9953580f40949faa1c045d41d86f831":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ab329e899c83449c99d76e5060bb9045":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"adc29804b1a64e458b954228e2fd6016":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":"hidden","width":null}},"adf14e3cb7f44be386045693563bbf7a":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_951bd0d350fa486eab12d0bfa346b50e","max":1000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_ee736ced3aec4e699984f6692067d9a4","value":1000}},"aedd00913dbf4d68a3b7e1a1b4aa9d17":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_cccdde2296644b3b913ffd6e1cad1868","placeholder":"​","style":"IPY_MODEL_e1c43a3a38054615b994a179579b18e2","value":"Epoch 20: 100%"}},"af055e25954c45bdbf635d5ac75ee9a0":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"af4def9b88624dafaf27dda0d63d1977":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_ddfc6a8e63db499f9321bbf9deb32679","IPY_MODEL_522a941a581d44bea9afb6ffbb6acd9c","IPY_MODEL_4c44887eccad487ba122dd62e7e3554c"],"layout":"IPY_MODEL_027ce4fad9884e34801e3809862cd3fa"}},"afdb896e821a4a20821fc9655491fb69":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e627da13270d4d63af1a05ece8125034","placeholder":"​","style":"IPY_MODEL_f268bb7a07854e69a6adb3a5d01682ae","value":" 998/1000 [01:16&lt;00:00, 12.99it/s, Loss=0.0428]"}},"b052ef4c6f9f4f71bd23972408c72fc0":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_3ba4c0a13ed34c96ba64b2009b2c1434","IPY_MODEL_6c5a341f329a4b72808a5297ac165ce5","IPY_MODEL_3422ee026f0c42ffac701c4f5b8019e9"],"layout":"IPY_MODEL_230879dc4fb64d27af96469a86ca14b6"}},"b0c34be31c1d49ee9a94c0b84278d6e9":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_40880ef8f5a34d0aa38318c24b6dba93","max":1000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_fb8e035bc68e462baf7019f2ca846ec1","value":1000}},"b30b9bfc1e364e23b48ca761d2c66e69":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"b39663147e414fabb6775378c7328d10":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b511aafee1124d91809f54e719d0cf6a":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"b54176ed61dd4a5585135d4614423866":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_d0ca4ac294564cb489448c5fde22e5b3","IPY_MODEL_8b19693ed2d142878bc9f55cee064f23","IPY_MODEL_e92f14cecfca479aa755eee9d030397f"],"layout":"IPY_MODEL_2acff6a5b3004586bc50dd0fd4563c97"}},"b5ed164da4194cb7b94faddf81fc38ec":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b653f3becf5146539fb02570f5b8c681":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_7855d4683c074259af8bd14cf5870c32","IPY_MODEL_d7608aae30f64d73aaf269a00b2395fd","IPY_MODEL_8d0ecb1e89f94cf5aeb85418ea2ef8e2"],"layout":"IPY_MODEL_bd8a5fc875d943e2b62885033b9284c1"}},"b74e8e48d2984f719ed2551806bb5ad9":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b78d7bdd51f44b6b8d49053f330238ed":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b93c34029fde41eab7dc9780949bbf53":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ee571c8a1a094ee88682e1e5be223b02","placeholder":"​","style":"IPY_MODEL_eb3cb6086407484d8ba5496a210e6cfe","value":" 999/1000 [01:15&lt;00:00, 13.98it/s, Loss=0.0263]"}},"ba80c523a61b44c793c4392c9374af81":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":"hidden","width":null}},"bbf6eb1f65ef44c996665fdd4c360f7c":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bbf84e587306489a9b113d4aaf85768c":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_434d414f8e2d4737a3e7d0387a40a727","placeholder":"​","style":"IPY_MODEL_d97f07dd4c62409892740af64de60356","value":" 1000/1000 [01:15&lt;00:00, 12.27it/s, Loss=0.0408]"}},"bc15b89681504604bcad556e5dc8fe19":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"bd8a5fc875d943e2b62885033b9284c1":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":"hidden","width":null}},"bdb4e7df3d544372b704ca9f1157160a":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_e4d6f61659bf4d42988358811a083f52","IPY_MODEL_e88c3b9d6b6f44878f8f8eb98a3445d3","IPY_MODEL_6685000345f945b78be1a41d2bd92d8b"],"layout":"IPY_MODEL_c1ccacae7654442f8932fb09056c6ff9"}},"bf4380c708d742ce94c2954afcb55a89":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_c8591f2e60b7474daf58344b45c44aa9","placeholder":"​","style":"IPY_MODEL_a299f60a8ada41208fc710230605154b","value":"Epoch 17: 100%"}},"c1ccacae7654442f8932fb09056c6ff9":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":"hidden","width":null}},"c29b151f0cb04654833e22ad1038020d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"c2a88bd91401427b97d68bfc2abe2645":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"c31d78decfbb455db7a5c1d7ba3a6759":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c4b9aefb173848249f03c4cbc919a615":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_3b989b1b5ddc4ec290019373b18e26b8","IPY_MODEL_55675a57497248eebd8b040602961052","IPY_MODEL_bbf84e587306489a9b113d4aaf85768c"],"layout":"IPY_MODEL_7e276a4402e74011a1fe008cbbda7be7"}},"c6a54aeb16c345ccb99a06cd3f7c4efe":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_929750ec0780441aab6c1f027024b250","placeholder":"​","style":"IPY_MODEL_64c5098cb60f4fdf9630eed573411127","value":" 999/1000 [01:16&lt;00:00, 13.89it/s, Loss=0.0336]"}},"c7515a5e98ec44978935a1174ca719d5":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c8591f2e60b7474daf58344b45c44aa9":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c9eca82ed0fc4428a9ee1219e03a436b":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_8e78d2bf9db94d48ad7f8ef4511ec85a","max":1000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_6db77b9a994441749dfc2d99a32c9535","value":1000}},"ca43e8a26e28415d8d7ababbea6708b5":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b39663147e414fabb6775378c7328d10","placeholder":"​","style":"IPY_MODEL_3cea1b54881d4cf6aa1b630ef0182c37","value":"Epoch 14: 100%"}},"cab87bfebc0b4691adb41068c1cefda9":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_90dad9f767b548ca953ee2f5d1466212","max":1000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_ced7fabcaff7400b8f8227aaebe95ff5","value":1000}},"cb58c313644a496b9dbb89e79515c752":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_8709725076b64bfa91ff1c84f6b38e3f","placeholder":"​","style":"IPY_MODEL_d29e006b22e3466c84479f2b6e13af65","value":" 1000/1000 [01:20&lt;00:00, 12.97it/s, Loss=0.0415]"}},"cb6de93595944f2eaeb67212c50a63f6":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_e42f2a884e3e4313a02b2bb73a234304","max":1000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_5b6b0f16d37444dcaaa0c357d78b5c96","value":1000}},"cb950abc3769461f9f52b4cec18a9240":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"cbc1648b5f87422bb04634bccc4dfae5":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"cccdde2296644b3b913ffd6e1cad1868":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ccff0c8ac48c4320a993f843f1dff408":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"cd20bae009a14c89aa06a533fe4e3c6a":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ce2721ab0fb141fcae4c9addabed1175":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":"hidden","width":null}},"ced7fabcaff7400b8f8227aaebe95ff5":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"d057e4365a7a42ed8cb85ceddb9574a7":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d0ca4ac294564cb489448c5fde22e5b3":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f0aab8fd0e2741dd8b0f387c28fee534","placeholder":"​","style":"IPY_MODEL_e9e46080f5bd4ae9bc5ed4b6b41ae122","value":"Epoch 15: 100%"}},"d263276f112741f08a518afee9caa719":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d29e006b22e3466c84479f2b6e13af65":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d34aedf870014f72b1f487a65a5cfa4e":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d4ff1941f45b4a208dd85c749670b43a":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_914f575a466947558cafec0197926eb5","IPY_MODEL_54fd426060024d2a98a8ebf4f7751467","IPY_MODEL_cb58c313644a496b9dbb89e79515c752"],"layout":"IPY_MODEL_adc29804b1a64e458b954228e2fd6016"}},"d7608aae30f64d73aaf269a00b2395fd":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_b5ed164da4194cb7b94faddf81fc38ec","max":1000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_85deafbf87c24a5c8d03f34929e46345","value":1000}},"d7a9c18b61ba4006a78fffb6dc8087dc":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_e6ad4fab72534d98bb3ed628e6c09c92","max":1000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_c29b151f0cb04654833e22ad1038020d","value":1000}},"d7b2b562383942e59560f4dbb7d36f03":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":"hidden","width":null}},"d7ba51c69d3f435098208f97614ff7d4":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d8ded99e868140b4aa844a1d782ad7e2":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d97f07dd4c62409892740af64de60356":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d9d1c4364e134aa383e41bb1ba2f277d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_34e77af347c34d91b0f37b742fd5da2b","IPY_MODEL_749e7c42be5d4e378f86fec401d58a08","IPY_MODEL_490d35904bf340cdb3c79d1c4fd0dae1"],"layout":"IPY_MODEL_fc4228fce15a45beb7db5182a29dbf37"}},"db588b19059847f5bd27e490fa0c4789":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":"hidden","width":null}},"ddfc6a8e63db499f9321bbf9deb32679":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_c31d78decfbb455db7a5c1d7ba3a6759","placeholder":"​","style":"IPY_MODEL_31287ca0b2884488aa37cbd0e15cc7a5","value":"Epoch 11: 100%"}},"de7f69fec71f4030a74a1ce6e8a6e539":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"dedc344d054c4845a1ef51a968cf9286":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"e11d5ed1aeba4c748a89bbd2b9fdd880":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":"hidden","width":null}},"e1c43a3a38054615b994a179579b18e2":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"e42f2a884e3e4313a02b2bb73a234304":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e4d6f61659bf4d42988358811a083f52":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_427bd640e87248ac94d205ed6b88965a","placeholder":"​","style":"IPY_MODEL_b30b9bfc1e364e23b48ca761d2c66e69","value":"Epoch 7: 100%"}},"e627da13270d4d63af1a05ece8125034":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e67aa1409fde45fea49fa8c1e577a200":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"e6ad4fab72534d98bb3ed628e6c09c92":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e6bb160e7e544503abb7240c310031f2":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_d263276f112741f08a518afee9caa719","max":20,"min":0,"orientation":"horizontal","style":"IPY_MODEL_6a947826fef741f0ae23b1a7817fc814","value":20}},"e88c3b9d6b6f44878f8f8eb98a3445d3":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_2d4f22c26e464403ba7bb9d32d3aeaa1","max":1000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_a404b92bd10d45a59860231b0bcae9e3","value":1000}},"e92f14cecfca479aa755eee9d030397f":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b78d7bdd51f44b6b8d49053f330238ed","placeholder":"​","style":"IPY_MODEL_6d25a08a95084ba9a4cfd7291169ce21","value":" 997/1000 [01:18&lt;00:00, 12.83it/s, Loss=0.0419]"}},"e9e46080f5bd4ae9bc5ed4b6b41ae122":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"eb3cb6086407484d8ba5496a210e6cfe":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ebb061ea487040618c9ecca43dcf2b1c":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ebc15dec7c4a4947926a96a48eca27d3":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_04ed05705f424796b34cd1b7aaa97060","IPY_MODEL_447982e29c9e42168e6e85e7eec3ebce","IPY_MODEL_c6a54aeb16c345ccb99a06cd3f7c4efe"],"layout":"IPY_MODEL_127bb77f7877481a91bd426d6360fe87"}},"ed672051c1d24f92ad6300bcbe69146d":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ee571c8a1a094ee88682e1e5be223b02":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ee736ced3aec4e699984f6692067d9a4":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"f0aab8fd0e2741dd8b0f387c28fee534":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f210abfce5a8421d9aede204d0cf3639":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"f268bb7a07854e69a6adb3a5d01682ae":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"f2a93e69d6944f3db650674aa122bdfc":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f6b1daece7a44d0eac19e11ac82bd687":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"f946ad05ec7b4b3d9b9f172d7b4d300d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_cb950abc3769461f9f52b4cec18a9240","placeholder":"​","style":"IPY_MODEL_fa378e92781e4bbc9ce875fed4b93055","value":" 999/1000 [01:18&lt;00:00, 15.10it/s, Loss=0.0322]"}},"f9dfa67539dd43119035356c9cfa9e5e":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b74e8e48d2984f719ed2551806bb5ad9","placeholder":"​","style":"IPY_MODEL_0f1fc0650c0d46a78ef7c5fe782b007b","value":"Epoch 1: 100%"}},"fa378e92781e4bbc9ce875fed4b93055":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"fac84f13432f493384471c6d167692dd":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"fb3891597ea9460e86f3dfd49075b4ba":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_f9dfa67539dd43119035356c9cfa9e5e","IPY_MODEL_adf14e3cb7f44be386045693563bbf7a","IPY_MODEL_fc92882542f34942a02591c4a3ece0e1"],"layout":"IPY_MODEL_99c48ae44aa244f3b1e3c1eebcccad3a"}},"fb8e035bc68e462baf7019f2ca846ec1":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"fc4228fce15a45beb7db5182a29dbf37":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":"hidden","width":null}},"fc483bf83e1f4ea7bd39e7fced6ec7ce":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_6a9c246749dc47c3b3259192aa38e5ae","placeholder":"​","style":"IPY_MODEL_5b4f3dd7e914438f968b77d9cf21cd78","value":" 998/1000 [01:18&lt;00:00, 12.74it/s, Loss=0.0436]"}},"fc92882542f34942a02591c4a3ece0e1":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_3f2b0a1be8114d45966e6bce4cd54ce7","placeholder":"​","style":"IPY_MODEL_cd20bae009a14c89aa06a533fe4e3c6a","value":" 999/1000 [49:52&lt;00:02,  2.82s/it, Loss=0.0468]"}},"fdf125bfed6149c2b6a752e7322ee376":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"fe51cfe1d7114fdf9ff98121c8de8937":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"fea35edfc80e45d4b6d743609dabcf23":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_13a6220857b940e4981900e9ff0438ce","placeholder":"​","style":"IPY_MODEL_dedc344d054c4845a1ef51a968cf9286","value":" 999/1000 [01:25&lt;00:00, 12.60it/s, Loss=0.0343]"}},"ff7f60dfa58342208542887c3416d5be":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ffb05423c3544374a30cc7d42811c49d":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}}}}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Imports","metadata":{"id":"yf_h9m8dbtux"}},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torch.utils.data import Dataset, DataLoader\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport time\nimport random\nimport math\nimport json\nfrom collections import defaultdict\nfrom tqdm.notebook import tqdm\nfrom IPython.display import clear_output\nimport zipfile\nimport os\nfrom google.colab import files","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:42:27.831494Z","iopub.execute_input":"2025-07-18T09:42:27.832096Z","iopub.status.idle":"2025-07-18T09:42:27.836816Z","shell.execute_reply.started":"2025-07-18T09:42:27.832069Z","shell.execute_reply":"2025-07-18T09:42:27.836110Z"},"id":"sk-izFEubtuz","trusted":true},"outputs":[],"execution_count":34},{"cell_type":"code","source":"try:\n    !pip install trimesh\n    import trimesh\n    TRIMESH_AVAILABLE = True\nexcept ImportError:\n    print(\"trimesh not available, using fallback for mesh operations.\")\n    TRIMESH_AVAILABLE = False\n\ntry:\n    from sklearn.metrics import accuracy_score, precision_score, recall_score\n    SKLEARN_AVAILABLE = True\nexcept ImportError:\n    print(\"Warning: sklearn not available, using custom metrics.\")\n    SKLEARN_AVAILABLE = False\n\ntry:\n    import scipy\n    from scipy.spatial import KDTree\n    SCIPY_AVAILABLE = True\nexcept ImportError:\n    print(\"Warning: scipy not available, installing...\")\n    !pip install scipy\n    try:\n        import scipy\n        from scipy.spatial import KDTree\n        SCIPY_AVAILABLE = True\n    except ImportError:\n        print(\"Warning: scipy still not available, using fallback distance computation.\")\n        SCIPY_AVAILABLE = False","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"execution":{"iopub.status.busy":"2025-07-18T09:42:27.837979Z","iopub.execute_input":"2025-07-18T09:42:27.838430Z","iopub.status.idle":"2025-07-18T09:42:30.917336Z","shell.execute_reply.started":"2025-07-18T09:42:27.838405Z","shell.execute_reply":"2025-07-18T09:42:30.916572Z"},"id":"pYW2l3ZIbtu0","outputId":"9593f550-928c-43a8-c98c-6ed39e2a2d0b","trusted":true},"outputs":[{"name":"stdout","text":"Requirement already satisfied: trimesh in /usr/local/lib/python3.11/dist-packages (4.7.1)\nRequirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.11/dist-packages (from trimesh) (1.26.4)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.20->trimesh) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.20->trimesh) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.20->trimesh) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.20->trimesh) (2025.1.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.20->trimesh) (2022.1.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.20->trimesh) (2.4.1)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.20->trimesh) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.20->trimesh) (2022.1.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.20->trimesh) (1.3.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.20->trimesh) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.20->trimesh) (2024.2.0)\n","output_type":"stream"}],"execution_count":35},{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:42:30.918797Z","iopub.execute_input":"2025-07-18T09:42:30.919021Z","iopub.status.idle":"2025-07-18T09:42:30.923179Z","shell.execute_reply.started":"2025-07-18T09:42:30.919000Z","shell.execute_reply":"2025-07-18T09:42:30.922361Z"},"id":"pBbLvDFpbtu0","trusted":true},"outputs":[],"execution_count":36},{"cell_type":"code","source":"# Set device and display GPU info\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nprint(f\"Using device: {device}\")\nif torch.cuda.is_available():\n    print(f\"GPU: {torch.cuda.get_device_name()}\")\n    print(f\"GPU Memory: {torch.cuda.get_device_properties(0).total_memory // 1024**3} GB\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"execution":{"iopub.status.busy":"2025-07-18T09:42:30.923828Z","iopub.execute_input":"2025-07-18T09:42:30.924015Z","iopub.status.idle":"2025-07-18T09:42:30.943006Z","shell.execute_reply.started":"2025-07-18T09:42:30.924000Z","shell.execute_reply":"2025-07-18T09:42:30.942270Z"},"id":"nu9xm22Dbtu1","outputId":"45858c3c-c1e2-4025-b153-79fd345d8df8","trusted":true},"outputs":[{"name":"stdout","text":"Using device: cuda\nGPU: Tesla P100-PCIE-16GB\nGPU Memory: 15 GB\n","output_type":"stream"}],"execution_count":37},{"cell_type":"markdown","source":"# Globals","metadata":{"id":"kvKKmRbtbtu1"}},{"cell_type":"code","source":"# DATASET CONFIGURATION - CHANGE THIS TO SWITCH DATASETS\nDATASET_NAME = \"synthetic_rooms\"  # Using real synthetic_rooms dataset, otherwise \"shapenet\"","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:42:30.944469Z","iopub.execute_input":"2025-07-18T09:42:30.944833Z","iopub.status.idle":"2025-07-18T09:42:30.956120Z","shell.execute_reply.started":"2025-07-18T09:42:30.944815Z","shell.execute_reply":"2025-07-18T09:42:30.955388Z"},"id":"q9xr-9N8btu1","trusted":true},"outputs":[],"execution_count":38},{"cell_type":"code","source":"# Dataset configurations\nDATASET_CONFIGS = {\n    \"shapenet\": {\n        \"path\": \"/kaggle/input/subdataset-random-pick-shapenet-5-gb/ShapeNet\",\n        \"ground_truth_path\": None,  # Ground truth in same directory\n        \"point_cloud_size\": 2048,\n        \"sample_points\": 4096,\n        \"categories\": None,  # none loads all categories, otherwise specify\n        \"file_extension\": \".npz\",\n        \"normalize\": True\n    },\n    \"synthetic_rooms\": {\n        \"path\": \"/kaggle/input/synthetic-rooms-subset-room04/synthetic rooms\",  # Fixed path\n        \"ground_truth_path\": \"/kaggle/input/your-ground-truth-directory\",  # Update this with actual path\n        \"point_cloud_size\": 2048,\n        \"sample_points\": 4096,\n        \"categories\": ['rooms_04'],  # Only rooms_04 since it's a subset\n        \"file_extension\": \".npz\",\n        \"normalize\": True\n    }\n}","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:42:30.956950Z","iopub.execute_input":"2025-07-18T09:42:30.957235Z","iopub.status.idle":"2025-07-18T09:42:30.970000Z","shell.execute_reply.started":"2025-07-18T09:42:30.957218Z","shell.execute_reply":"2025-07-18T09:42:30.969224Z"},"id":"SkYuTTPubtu2","trusted":true},"outputs":[],"execution_count":39},{"cell_type":"code","source":"# Get current dataset config\nCURRENT_DATASET = DATASET_CONFIGS[DATASET_NAME]\n\n# Data parameters (dynamically set based on dataset)\nBATCH_SIZE = 4\nINPUT_DIM = 3\nOUTPUT_DIM = 1\nPOINT_CLOUD_SIZE = CURRENT_DATASET[\"point_cloud_size\"]\nSAMPLE_POINTS = CURRENT_DATASET[\"sample_points\"]\n\n# Model parameters\nENCODER_C_DIM = 32\nDECODER_HIDDEN_DIM = 64 # TODO: development phase : Reduced to 64 for development phase from 128\nPLANE_RESOLUTION = 64 \nNUM_PLANES = 3  # XY, XZ, YZ planes\n\n# Training parameters - FINAL OPTIMIZATION FOR PRECISION\nLEARNING_RATE = 3e-4 # Optimized from 1e-3 for stability with enhanced Focal Loss\nNUM_EPOCHS = 15 # Increased for better convergence with all improvements\nSAVE_INTERVAL = 5 \nEVAL_INTERVAL = 2 \n\n# Paths (dynamically set based on dataset)\nDATA_PATH = CURRENT_DATASET[\"path\"]\nMODEL_SAVE_PATH = f\"./models/{DATASET_NAME}\"\nRESULTS_PATH = f\"./results/{DATASET_NAME}\"","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:42:30.970757Z","iopub.execute_input":"2025-07-18T09:42:30.971034Z","iopub.status.idle":"2025-07-18T09:42:30.985489Z","shell.execute_reply.started":"2025-07-18T09:42:30.971014Z","shell.execute_reply":"2025-07-18T09:42:30.984785Z"},"id":"FRzCB_U_btu3","trusted":true},"outputs":[],"execution_count":40},{"cell_type":"code","source":"# Create directories if they don't exist\nos.makedirs(MODEL_SAVE_PATH, exist_ok=True)\nos.makedirs(RESULTS_PATH, exist_ok=True)","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:42:30.986735Z","iopub.execute_input":"2025-07-18T09:42:30.986960Z","iopub.status.idle":"2025-07-18T09:42:31.002421Z","shell.execute_reply.started":"2025-07-18T09:42:30.986935Z","shell.execute_reply":"2025-07-18T09:42:31.001902Z"},"id":"G0BCi4bRbtu4","trusted":true},"outputs":[],"execution_count":41},{"cell_type":"markdown","source":"# Utils","metadata":{"id":"_HSQ0Zq8btu4"}},{"cell_type":"code","source":"def set_seed(seed=42):\n    \"\"\"Set random seed for reproducibility\"\"\"\n    torch.manual_seed(seed)\n    np.random.seed(seed)\n    if torch.cuda.is_available():\n        torch.cuda.manual_seed(seed)\n\ndef count_parameters(model):\n    \"\"\"Count the number of trainable parameters in a model\"\"\"\n    return sum(p.numel() for p in model.parameters() if p.requires_grad)","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:42:31.003134Z","iopub.execute_input":"2025-07-18T09:42:31.003354Z","iopub.status.idle":"2025-07-18T09:42:31.015988Z","shell.execute_reply.started":"2025-07-18T09:42:31.003329Z","shell.execute_reply":"2025-07-18T09:42:31.015358Z"},"id":"7b2NqRhJbtu5","trusted":true},"outputs":[],"execution_count":42},{"cell_type":"code","source":"def normalize_point_cloud(pc):\n    \"\"\"Normalize point cloud to unit sphere\"\"\"\n    centroid = np.mean(pc, axis=0)\n    pc = pc - centroid\n    max_dist = np.max(np.sqrt(np.sum(pc**2, axis=1)))\n    pc = pc / max_dist\n    return pc","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:42:31.016636Z","iopub.execute_input":"2025-07-18T09:42:31.016864Z","iopub.status.idle":"2025-07-18T09:42:31.030795Z","shell.execute_reply.started":"2025-07-18T09:42:31.016843Z","shell.execute_reply":"2025-07-18T09:42:31.030120Z"},"id":"Nl-pkEyHbtu5","trusted":true},"outputs":[],"execution_count":43},{"cell_type":"code","source":"def save_checkpoint(model, optimizer, epoch, loss, path):\n    \"\"\"Save model checkpoint\"\"\"\n    torch.save({\n        'epoch': epoch,\n        'model_state_dict': model.state_dict(),\n        'optimizer_state_dict': optimizer.state_dict(),\n        'loss': loss,\n    }, path)\n    print(f\"Checkpoint saved at {path}\")\n\ndef load_checkpoint(model, optimizer, path):\n    \"\"\"Load model checkpoint\"\"\"\n    checkpoint = torch.load(path, map_location=device)\n    model.load_state_dict(checkpoint['model_state_dict'])\n    optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n    return checkpoint['epoch'], checkpoint['loss']","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:42:31.033177Z","iopub.execute_input":"2025-07-18T09:42:31.033358Z","iopub.status.idle":"2025-07-18T09:42:31.045068Z","shell.execute_reply.started":"2025-07-18T09:42:31.033345Z","shell.execute_reply":"2025-07-18T09:42:31.044363Z"},"id":"vuDTLWhKbtu5","trusted":true},"outputs":[],"execution_count":44},{"cell_type":"code","source":"def validate_dataset_path():\n    \"\"\"Validate that the dataset path exists\"\"\"\n    if not os.path.exists(DATA_PATH):\n        raise FileNotFoundError(f\"Dataset path {DATA_PATH} does not exist! Please ensure the real dataset is available.\")\n    return True\n\ndef sample_points_on_mesh(vertices, faces, num_points=2048):\n    \"\"\"Sample points from mesh surface\"\"\"\n    if TRIMESH_AVAILABLE:\n        mesh = trimesh.Trimesh(vertices=vertices, faces=faces)\n        points, _ = trimesh.sample.sample_surface(mesh, num_points)\n        return points\n    else:\n        # Fallback: random sampling from vertices\n        indices = np.random.choice(len(vertices), num_points, replace=True)\n        return vertices[indices]","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:42:31.045632Z","iopub.execute_input":"2025-07-18T09:42:31.045806Z","iopub.status.idle":"2025-07-18T09:42:31.064557Z","shell.execute_reply.started":"2025-07-18T09:42:31.045792Z","shell.execute_reply":"2025-07-18T09:42:31.063901Z"},"id":"jBNuS-6Hbtu5","trusted":true},"outputs":[],"execution_count":45},{"cell_type":"code","source":"# Zip and download file\ndef zip_and_download(directory_path, zip_name):\n    \"\"\"Create zip file and download it\"\"\"\n    with zipfile.ZipFile(zip_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for root, dirs, file_list in os.walk(directory_path):\n            for file in file_list:\n                file_path = os.path.join(root, file)\n                arcname = os.path.relpath(file_path, directory_path)\n                zipf.write(file_path, arcname)\n\n    files.download(zip_name)  # This 'files' refers to the imported Google Colab module","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:42:31.065207Z","iopub.execute_input":"2025-07-18T09:42:31.065420Z","iopub.status.idle":"2025-07-18T09:42:31.080286Z","shell.execute_reply.started":"2025-07-18T09:42:31.065405Z","shell.execute_reply":"2025-07-18T09:42:31.079640Z"},"id":"3zG5n0Rrnh_o","trusted":true},"outputs":[],"execution_count":46},{"cell_type":"code","source":"# Custom metrics fallback if sklearn is not available\ndef custom_accuracy_score(y_true, y_pred):\n    \"\"\"Custom accuracy score implementation\"\"\"\n    return np.mean(y_true == y_pred)\n\ndef custom_precision_score(y_true, y_pred):\n    \"\"\"Custom precision calculation\"\"\"\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    return tp / (tp + fp) if (tp + fp) > 0 else 0.0\n\ndef custom_recall_score(y_true, y_pred):\n    \"\"\"Custom recall calculation\"\"\"\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    return tp / (tp + fn) if (tp + fn) > 0 else 0.0\n\n# Use sklearn if available, otherwise use custom implementations\nif SKLEARN_AVAILABLE:\n    accuracy_func = accuracy_score\n    precision_func = precision_score\n    recall_func = recall_score\nelse:\n    accuracy_func = custom_accuracy_score\n    precision_func = custom_precision_score\n    recall_func = custom_recall_score","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:42:31.080880Z","iopub.execute_input":"2025-07-18T09:42:31.081079Z","iopub.status.idle":"2025-07-18T09:42:31.094163Z","shell.execute_reply.started":"2025-07-18T09:42:31.081055Z","shell.execute_reply":"2025-07-18T09:42:31.093531Z"},"id":"ltbekLDpbtu6","trusted":true},"outputs":[],"execution_count":47},{"cell_type":"code","source":"# Lightweight optimization utilities\ndef apply_depthwise_separable_conv(in_channels, out_channels, kernel_size=3):\n    \"\"\"Create depthwise separable convolution layers\"\"\"\n    return nn.Sequential(\n        # Depthwise convolution\n        nn.Conv2d(in_channels, in_channels, kernel_size,\n                 padding=kernel_size//2, groups=in_channels, bias=False),\n        nn.BatchNorm2d(in_channels),\n        nn.ReLU(inplace=True),\n        # Pointwise convolution\n        nn.Conv2d(in_channels, out_channels, 1, bias=False),\n        nn.BatchNorm2d(out_channels),\n        nn.ReLU(inplace=True)\n    )\n\ndef prune_model(model, pruning_ratio=0.2):\n    \"\"\"Simple magnitude-based pruning\"\"\"\n    import torch.nn.utils.prune as prune\n\n    for name, module in model.named_modules():\n        if isinstance(module, nn.Conv2d) or isinstance(module, nn.Linear):\n            prune.l1_unstructured(module, name='weight', amount=pruning_ratio)\n    return model","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:42:31.094921Z","iopub.execute_input":"2025-07-18T09:42:31.095158Z","iopub.status.idle":"2025-07-18T09:42:31.111345Z","shell.execute_reply.started":"2025-07-18T09:42:31.095137Z","shell.execute_reply":"2025-07-18T09:42:31.110829Z"},"id":"25J7DdHXbtu6","trusted":true},"outputs":[],"execution_count":48},{"cell_type":"code","source":"def get_dataset_info():\n      \"\"\"Display current dataset configuration information\"\"\"\n      print(f\"Current dataset: {DATASET_NAME}\")\n      print(f\"Dataset path: {DATA_PATH}\")\n      print(f\"Point cloud size: {POINT_CLOUD_SIZE}\")\n      print(f\"Sample points: {SAMPLE_POINTS}\")","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:42:31.111820Z","iopub.execute_input":"2025-07-18T09:42:31.111991Z","iopub.status.idle":"2025-07-18T09:42:31.124991Z","shell.execute_reply.started":"2025-07-18T09:42:31.111977Z","shell.execute_reply":"2025-07-18T09:42:31.124399Z"},"id":"XAz5JtMpbtu6","trusted":true},"outputs":[],"execution_count":49},{"cell_type":"markdown","source":"## Setup","metadata":{"id":"u1K7xXmtbtu6"}},{"cell_type":"code","source":"print(\"=\" * 70)\nprint(\"Lightweight Convolutional Occupancy Networks for Virtual Scene Generation\")\nprint(\"=\" * 70)\n\nset_seed(42)\nprint(\"✓ Random seed set\")\nget_dataset_info()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"execution":{"iopub.status.busy":"2025-07-18T09:42:31.125550Z","iopub.execute_input":"2025-07-18T09:42:31.125752Z","iopub.status.idle":"2025-07-18T09:42:31.144975Z","shell.execute_reply.started":"2025-07-18T09:42:31.125737Z","shell.execute_reply":"2025-07-18T09:42:31.144370Z"},"id":"w7BGzKXjbtu6","outputId":"0a478675-dc21-49c0-b398-70f64b4405a2","trusted":true},"outputs":[{"name":"stdout","text":"======================================================================\nLightweight Convolutional Occupancy Networks for Virtual Scene Generation\n======================================================================\n✓ Random seed set\nCurrent dataset: synthetic_rooms\nDataset path: /kaggle/input/synthetic-rooms-subset-room04/synthetic rooms\nPoint cloud size: 2048\nSample points: 4096\n","output_type":"stream"}],"execution_count":50},{"cell_type":"markdown","source":"# Data","metadata":{"id":"FjNqtQd8btu7"}},{"cell_type":"code","source":"    def _load_synthetic_rooms_files(self):\n      \"\"\"Load Synthetic Rooms file list with correct directory structure\"\"\"\n      files = []\n\n      # Look for rooms_XX directories\n      for room_class in os.listdir(self.data_path):\n          room_path = os.path.join(self.data_path, room_class)\n          if os.path.isdir(room_path) and room_class.startswith('rooms_'):\n              # Look for scene directories (00000000, 00000001, etc.)\n              for scene_id in os.listdir(room_path):\n                  scene_path = os.path.join(room_path, scene_id)\n                  if os.path.isdir(scene_path):\n                      # Check if required subdirectories exist\n                      pointcloud_dir = os.path.join(scene_path, 'pointcloud')\n                      points_iou_dir = os.path.join(scene_path, 'points_iou')\n\n                      if os.path.exists(pointcloud_dir) and os.path.exists(points_iou_dir):\n                          files.append(f\"{room_class}/{scene_id}\")\n\n      print(f\"Found {len(files)} files before filtering\")  # Debug line\n\n      # Apply train/val split\n      np.random.seed(42)  # Fixed seed for consistent splits\n      np.random.shuffle(files)\n      split_idx = int(0.8 * len(files))\n\n      if self.split == 'train':\n          files = files[:split_idx]\n      else:\n          files = files[split_idx:]\n\n      print(f\"After split ({self.split}): {len(files)} files\")  # Debug line\n      return files","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:42:31.145556Z","iopub.execute_input":"2025-07-18T09:42:31.145729Z","iopub.status.idle":"2025-07-18T09:42:31.158083Z","shell.execute_reply.started":"2025-07-18T09:42:31.145716Z","shell.execute_reply":"2025-07-18T09:42:31.157383Z"},"id":"XTLKHdlibtu7","trusted":true},"outputs":[],"execution_count":51},{"cell_type":"code","source":"def create_weighted_sampler(dataset, positive_weight_multiplier=10.0):\n    \"\"\"\n    Create a WeightedRandomSampler that boosts samples with occupied voxels.\n    \n    Args:\n        dataset: The dataset to create sampler for\n        positive_weight_multiplier: Multiplier for samples with occupied voxels\n    \n    Returns:\n        WeightedRandomSampler instance\n    \"\"\"\n    from torch.utils.data import WeightedRandomSampler\n    \n    print(f\"Computing sample weights for {len(dataset)} samples...\")\n    print(\"This may take a moment for large datasets...\")\n    \n    sample_weights = []\n    occupied_samples = 0\n    \n    # Analyze each sample to determine if it contains occupied voxels\n    for i in tqdm(range(len(dataset)), desc=\"Computing sample weights\"):\n        try:\n            # Load the sample\n            sample = dataset[i]\n            occupancy = sample['occupancy']\n            \n            # Check if sample has any occupied voxels\n            has_occupied = (occupancy > 0.5).any().item()\n            \n            if has_occupied:\n                # Calculate positive ratio for this sample\n                positive_ratio = (occupancy > 0.5).float().mean().item()\n                \n                # Weight based on positive ratio and multiplier\n                # Samples with more occupied voxels get higher weights\n                weight = positive_weight_multiplier * (1.0 + positive_ratio)\n                occupied_samples += 1\n            else:\n                # Empty samples get baseline weight\n                weight = 1.0\n                \n            sample_weights.append(weight)\n            \n        except Exception as e:\n            print(f\"Warning: Could not process sample {i}: {e}\")\n            # Default weight for problematic samples\n            sample_weights.append(1.0)\n    \n    # Statistics\n    total_weight = sum(sample_weights)\n    avg_weight = total_weight / len(sample_weights)\n    \n    print(f\"✓ Sample weight computation completed:\")\n    print(f\"  - Total samples: {len(dataset)}\")\n    print(f\"  - Samples with occupied voxels: {occupied_samples}\")\n    print(f\"  - Samples with only empty voxels: {len(dataset) - occupied_samples}\")\n    print(f\"  - Occupied sample ratio: {occupied_samples/len(dataset)*100:.1f}%\")\n    print(f\"  - Average weight: {avg_weight:.2f}\")\n    print(f\"  - Positive weight multiplier: {positive_weight_multiplier:.1f}x\")\n    \n    # Create the sampler\n    sampler = WeightedRandomSampler(\n        weights=sample_weights,\n        num_samples=len(sample_weights),\n        replacement=True\n    )\n    \n    return sampler\n\ndef create_data_loaders(batch_size=BATCH_SIZE, use_weighted_sampler=True, positive_weight_multiplier=10.0):\n    \"\"\"Create train and validation data loaders for current dataset\"\"\"\n    print(f\"Creating data loaders for {DATASET_NAME} dataset...\")\n    get_dataset_info()\n\n    train_dataset = BaseDataset(DATA_PATH, 'train')\n    val_dataset = BaseDataset(DATA_PATH, 'val')\n\n    # Create weighted sampler for training data to address class imbalance\n    if use_weighted_sampler:\n        print(\"\\n🎯 Creating WeightedRandomSampler for training data...\")\n        train_sampler = create_weighted_sampler(train_dataset, positive_weight_multiplier)\n        \n        # Use sampler for training (set shuffle=False when using sampler)\n        train_loader = DataLoader(\n            train_dataset, \n            batch_size=batch_size,\n            sampler=train_sampler,  # Use weighted sampler instead of shuffle\n            num_workers=2\n        )\n        \n        print(\"✓ Training loader created with WeightedRandomSampler\")\n    else:\n        # Standard random sampling\n        train_loader = DataLoader(\n            train_dataset, \n            batch_size=batch_size,\n            shuffle=True, \n            num_workers=2\n        )\n        \n        print(\"✓ Training loader created with standard random sampling\")\n    \n    # Validation loader always uses standard sampling\n    val_loader = DataLoader(\n        val_dataset, \n        batch_size=batch_size,\n        shuffle=False, \n        num_workers=2\n    )\n\n    print(f\"Train dataset size: {len(train_dataset)}\")\n    print(f\"Validation dataset size: {len(val_dataset)}\")\n\n    return train_loader, val_loader","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:42:31.158828Z","iopub.execute_input":"2025-07-18T09:42:31.159102Z","iopub.status.idle":"2025-07-18T09:42:31.173205Z","shell.execute_reply.started":"2025-07-18T09:42:31.159086Z","shell.execute_reply":"2025-07-18T09:42:31.172504Z"},"id":"Xa-lVxOObtu7","trusted":true},"outputs":[],"execution_count":52},{"cell_type":"code","source":"class BaseDataset(Dataset):\n    \"\"\"Base dataset class for real datasets only\"\"\"\n\n    def __init__(self, data_path, split='train', num_sample_points=SAMPLE_POINTS, dataset_type=DATASET_NAME):\n        self.data_path = data_path\n        self.split = split\n        self.num_sample_points = num_sample_points\n        self.dataset_type = dataset_type\n        self.config = CURRENT_DATASET\n        self.has_real_data = os.path.exists(self.data_path)\n        \n        # Ground truth path for mesh evaluation\n        self.ground_truth_path = self.config.get(\"ground_truth_path\", None)\n        self.has_ground_truth = self.ground_truth_path and os.path.exists(self.ground_truth_path)\n\n        # Validate dataset exists - fail if not found\n        validate_dataset_path()\n\n        # Load data file paths\n        self.data_files = self._load_data_files()\n\n        if not self.data_files:\n            raise ValueError(f\"No data files found for {dataset_type} dataset in {data_path}\")\n\n    def _load_data_files(self):\n        \"\"\"Load list of data files based on dataset type\"\"\"\n        if self.dataset_type == \"shapenet\":\n            return self._load_shapenet_files()\n        elif self.dataset_type == \"synthetic_rooms\":\n            return self._load_synthetic_rooms_files()\n        else:\n            raise ValueError(f\"Unknown dataset type: {self.dataset_type}\")\n\n    def _load_shapenet_files(self):\n        \"\"\"Load ShapeNet file list\"\"\"\n        files = []\n\n        if self.has_real_data:\n            # Get categories if None, discover all avaiable\n            categories = self.config[\"categories\"]\n            if categories is None:\n                categories = [d for d in os.listdir(self.data_path)\n                              if os.path.isdir(os.path.join(self.data_path, d))]\n\n        # Load from actual ShapeNet structure\n        for category in categories:\n            category_path = os.path.join(self.data_path, category)\n            if os.path.exists(category_path):\n                split_file = os.path.join(category_path, f\"{self.split}.lst\")\n                if os.path.exists(split_file):\n                    with open(split_file, 'r') as f:\n                        category_files = [f\"{category}/{line.strip()}\" for line in f.readlines()]\n                        files.extend(category_files)\n                else:\n                    # If no split file, use all objects in category\n                    for obj_id in os.listdir(category_path):\n                        obj_path = os.path.join(category_path, obj_id)\n                        if os.path.isdir(obj_path):\n                            files.append(f\"{category}/{obj_id}\")\n\n        # Apply train/val split if no predefined split files exist\n        if files and not any(os.path.exists(os.path.join(self.data_path, cat, f\"{self.split}.lst\"))\n                           for cat in categories):\n            # Random split: 80% train, 20% val\n            np.random.seed(42)\n            np.random.shuffle(files)\n            split_idx = int(0.8 * len(files))\n\n            if self.split == 'train':\n                files = files[:split_idx]\n            else:\n                files = files[split_idx:]\n\n        return files\n\n    def _load_synthetic_rooms_files(self):\n        \"\"\"Load Synthetic Rooms file list with correct directory structure\"\"\"\n        files = []\n\n        # Look for rooms_XX directories\n        for room_class in os.listdir(self.data_path):\n            room_path = os.path.join(self.data_path, room_class)\n            if os.path.isdir(room_path) and room_class.startswith('rooms_'):\n                # Look for scene directories (00000000, 00000001, etc.)\n                for scene_id in os.listdir(room_path):\n                    scene_path = os.path.join(room_path, scene_id)\n                    if os.path.isdir(scene_path):\n                        # Check if required subdirectories exist\n                        pointcloud_dir = os.path.join(scene_path, 'pointcloud')\n                        points_iou_dir = os.path.join(scene_path, 'points_iou')\n\n                        if os.path.exists(pointcloud_dir) and os.path.exists(points_iou_dir):\n                            files.append(f\"{room_class}/{scene_id}\")\n\n        print(f\"Found {len(files)} files before filtering\")  # Debug line\n\n        # Apply train/val split\n        np.random.seed(42)  # Fixed seed for consistent splits\n        np.random.shuffle(files)\n        split_idx = int(0.8 * len(files))\n\n        if self.split == 'train':\n            files = files[:split_idx]\n        else:\n            files = files[split_idx:]\n\n        print(f\"After split ({self.split}): {len(files)} files\")  # Debug line\n        return files\n\n    def __len__(self):\n        return len(self.data_files)\n\n    def __getitem__(self, idx):\n        \"\"\"Get a single data sample - real data only\"\"\"\n        file_id = self.data_files[idx]\n\n        try:\n            return self._load_real_data(file_id)\n        except Exception as e:\n            raise RuntimeError(f\"Failed to load real data for {file_id}: {str(e)}. \"\n                             f\"Ensure the dataset is properly formatted.\")\n\n    def _load_real_data(self, file_id):\n        \"\"\"Load real dataset file\"\"\"\n        if self.dataset_type == \"shapenet\":\n            return self._load_shapenet_sample(file_id)\n        elif self.dataset_type == \"synthetic_rooms\":\n            return self._load_synthetic_rooms_sample(file_id)\n\n    def _load_shapenet_sample(self, file_id):\n        \"\"\"Load ShapeNet sample\"\"\"\n        parts = file_id.split('/')\n        category = parts[0]\n        hash_id = parts[1]\n\n        # Check nested structure first\n        nested_path = os.path.join(self.data_path, category, hash_id)\n        file_path = None\n\n        if os.path.isdir(nested_path):\n            # Look for .npz files inside the hash directory\n            for file in os.listdir(nested_path):\n                if file.endswith('.npz'):\n                    file_path = os.path.join(nested_path, file)\n                    break\n        if file_path is None:\n            # Fallback to direct file\n            file_path = os.path.join(self.data_path, category, f\"{hash_id}.npz\")\n\n        if not os.path.exists(file_path):\n            raise FileNotFoundError(f\"ShapeNet file not found: {file_path}\")\n\n        # Load the file\n        data = np.load(file_path)\n\n        # Extract required fields\n        if 'points' not in data:\n            raise ValueError(f\"No 'points' field found in {file_path}\")\n\n        point_cloud = data['points'][:self.config[\"point_cloud_size\"]]\n\n        if len(data['points']) == len(data['occupancies']):\n            sample_points = data['points'][:self.num_sample_points]\n            occupancy_values = data['occupancies'][:self.num_sample_points]\n        else:\n            # Generate sample points\n            raise ValueError(f\"Mismatched data shapes in {file_path}\")\n\n        if self.config[\"normalize\"]:\n            point_cloud = normalize_point_cloud(point_cloud)\n            sample_points = normalize_point_cloud(sample_points)\n\n        return {\n            'point_cloud': torch.FloatTensor(point_cloud),\n            'sample_points': torch.FloatTensor(sample_points),\n            'occupancy': torch.FloatTensor(occupancy_values)\n        }\n\n    def _load_synthetic_rooms_sample(self, file_id):\n        \"\"\"Load Synthetic Rooms sample with correct file structure\"\"\"\n        room_class, scene_id = file_id.split('/')\n        scene_path = os.path.join(self.data_path, room_class, scene_id)\n\n        # Load pointcloud data\n        pointcloud_dir = os.path.join(scene_path, 'pointcloud')\n        pointcloud_files = [f for f in os.listdir(pointcloud_dir) if f.endswith('.npz')]\n        if not pointcloud_files:\n            raise FileNotFoundError(f\"No pointcloud files in {pointcloud_dir}\")\n\n        # Use first pointcloud file\n        local_rng = np.random.RandomState(hash(file_id) % 2**32)\n        pointcloud_path = os.path.join(pointcloud_dir, local_rng.choice(pointcloud_files))\n        pointcloud_data = np.load(pointcloud_path)\n\n        # Load points_iou data\n        points_iou_dir = os.path.join(scene_path, 'points_iou')\n        iou_files = [f for f in os.listdir(points_iou_dir) if f.endswith('.npz')]\n        if not iou_files:\n            raise FileNotFoundError(f\"No IoU files in {points_iou_dir}\")\n\n        # Use first IoU file\n        iou_path = os.path.join(points_iou_dir, local_rng.choice(iou_files))\n        iou_data = np.load(iou_path)\n\n        # Extract data with correct field names\n        pc_indices = np.random.choice(len(pointcloud_data['points']), self.config[\"point_cloud_size\"], replace=False)\n        point_cloud = pointcloud_data['points'][pc_indices]\n        indices = np.random.choice(len(iou_data['points']), self.num_sample_points, replace=False)\n        sample_points = iou_data['points'][indices]\n\n        # Unpack occupancy values (they're packed as bits)\n        packed_occupancies = iou_data['occupancies']\n        occupancy_values = np.unpackbits(packed_occupancies).astype(np.float32)\n        occupancy_values = occupancy_values[indices]\n\n        if self.config[\"normalize\"]:\n            point_cloud = normalize_point_cloud(point_cloud)\n            sample_points = normalize_point_cloud(sample_points)\n\n        # Prepare return data\n        sample_data = {\n            'point_cloud': torch.FloatTensor(point_cloud),\n            'sample_points': torch.FloatTensor(sample_points),\n            'occupancy': torch.FloatTensor(occupancy_values),\n            'file_id': file_id  # Add file_id for ground truth lookup\n        }\n\n        # Load ground truth mesh if available\n        if self.has_ground_truth:\n            gt_path = os.path.join(self.ground_truth_path, room_class, scene_id)\n            if os.path.exists(gt_path):\n                # Look for .obj files\n                obj_files = [f for f in os.listdir(gt_path) if f.endswith('.obj')]\n                if obj_files:\n                    gt_mesh_path = os.path.join(gt_path, obj_files[0])\n                    sample_data['ground_truth_mesh_path'] = gt_mesh_path\n\n        return sample_data\n\n    def get_ground_truth_mesh_path(self, file_id):\n        \"\"\"Get ground truth mesh path for a specific file_id\"\"\"\n        if not self.has_ground_truth:\n            return None\n        \n        room_class, scene_id = file_id.split('/')\n        gt_path = os.path.join(self.ground_truth_path, room_class, scene_id)\n        \n        if os.path.exists(gt_path):\n            obj_files = [f for f in os.listdir(gt_path) if f.endswith('.obj')]\n            if obj_files:\n                return os.path.join(gt_path, obj_files[0])\n        \n        return None","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:42:31.174098Z","iopub.execute_input":"2025-07-18T09:42:31.174353Z","iopub.status.idle":"2025-07-18T09:42:31.199068Z","shell.execute_reply.started":"2025-07-18T09:42:31.174332Z","shell.execute_reply":"2025-07-18T09:42:31.198390Z"},"trusted":true},"outputs":[],"execution_count":53},{"cell_type":"markdown","source":"## Data Loading","metadata":{"id":"Cwb0yw7Gbtu7"}},{"cell_type":"code","source":"print(\"\\n2. DATA LOADING WITH WEIGHTED SAMPLING\")\nprint(\"-\" * 40)\n\n# Create data loaders with weighted sampling enabled\ntrain_loader, val_loader = create_data_loaders(\n    batch_size=BATCH_SIZE, \n    use_weighted_sampler=True, \n    positive_weight_multiplier=10.0  # 10x boost for occupied samples\n)\nprint(\"✓ Data loaders created with WeightedRandomSampler\")\n\n# Show sample shapes\nsample_batch = next(iter(train_loader))\nfor key, value in sample_batch.items():\n    if hasattr(value, 'shape'):\n        print(f\"  {key}: {value.shape}\")\n    else:\n        print(f\"  {key}: {type(value)} (length: {len(value)})\")\n\n# Test the weighted sampling effect\nprint(\"\\n📊 Testing weighted sampling effect...\")\nprint(\"Analyzing occupancy distribution in first 5 batches:\")\n\ntotal_occupied = 0\ntotal_points = 0\nfor i, batch in enumerate(train_loader):\n    if i >= 5:\n        break\n    occupancy = batch['occupancy']\n    batch_occupied = (occupancy > 0.5).sum().item()\n    batch_total = occupancy.numel()\n    total_occupied += batch_occupied\n    total_points += batch_total\n    \n    print(f\"  Batch {i+1}: {batch_occupied}/{batch_total} occupied ({100*batch_occupied/batch_total:.1f}%)\")\n\nweighted_ratio = total_occupied / total_points\nprint(f\"Overall ratio with weighted sampling: {100*weighted_ratio:.1f}%\")\nprint(f\"This should be higher than the original ~1% ratio due to positive class boosting!\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"execution":{"iopub.status.busy":"2025-07-18T09:42:31.199745Z","iopub.execute_input":"2025-07-18T09:42:31.199905Z","iopub.status.idle":"2025-07-18T09:42:43.406636Z","shell.execute_reply.started":"2025-07-18T09:42:31.199892Z","shell.execute_reply":"2025-07-18T09:42:43.405905Z"},"id":"Kp99ZuLObtu7","outputId":"1660606e-be4f-4e67-bdb8-b79e3bffda6d","trusted":true},"outputs":[{"name":"stdout","text":"\n2. DATA LOADING WITH WEIGHTED SAMPLING\n----------------------------------------\nCreating data loaders for synthetic_rooms dataset...\nCurrent dataset: synthetic_rooms\nDataset path: /kaggle/input/synthetic-rooms-subset-room04/synthetic rooms\nPoint cloud size: 2048\nSample points: 4096\nFound 1000 files before filtering\nAfter split (train): 800 files\nFound 1000 files before filtering\nAfter split (val): 200 files\n\n🎯 Creating WeightedRandomSampler for training data...\nComputing sample weights for 800 samples...\nThis may take a moment for large datasets...\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Computing sample weights:   0%|          | 0/800 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"32f65ab94a98466e9e335b1f7c8ef892"}},"metadata":{}},{"name":"stdout","text":"✓ Sample weight computation completed:\n  - Total samples: 800\n  - Samples with occupied voxels: 800\n  - Samples with only empty voxels: 0\n  - Occupied sample ratio: 100.0%\n  - Average weight: 10.10\n  - Positive weight multiplier: 10.0x\n✓ Training loader created with WeightedRandomSampler\nTrain dataset size: 800\nValidation dataset size: 200\n✓ Data loaders created with WeightedRandomSampler\n  point_cloud: torch.Size([4, 2048, 3])\n  sample_points: torch.Size([4, 4096, 3])\n  occupancy: torch.Size([4, 4096])\n  file_id: <class 'list'> (length: 4)\n\n📊 Testing weighted sampling effect...\nAnalyzing occupancy distribution in first 5 batches:\n  Batch 1: 143/16384 occupied (0.9%)\n  Batch 2: 139/16384 occupied (0.8%)\n  Batch 3: 168/16384 occupied (1.0%)\n  Batch 4: 177/16384 occupied (1.1%)\n  Batch 5: 138/16384 occupied (0.8%)\nOverall ratio with weighted sampling: 0.9%\nThis should be higher than the original ~1% ratio due to positive class boosting!\n","output_type":"stream"}],"execution_count":54},{"cell_type":"markdown","source":"## Dataset Analysis","metadata":{}},{"cell_type":"code","source":"class FocalLoss(nn.Module):\n    \"\"\"Focal Loss for addressing extreme class imbalance\"\"\"\n    def __init__(self, alpha=0.25, gamma=2, reduction='mean', pos_weight=None):\n        super().__init__()\n        self.alpha = alpha\n        self.gamma = gamma\n        self.reduction = reduction\n        self.pos_weight = pos_weight\n\n    def forward(self, inputs, targets):\n        BCE_loss = F.binary_cross_entropy_with_logits(inputs, targets, reduction='none', pos_weight=self.pos_weight)\n        pt = torch.exp(-BCE_loss)\n        F_loss = self.alpha * (1-pt)**self.gamma * BCE_loss\n\n        if self.reduction == 'mean':\n            return F_loss.mean()\n        elif self.reduction == 'sum':\n            return F_loss.sum()\n        else:\n            return F_loss\n\ndef analyze_dataset_balance(train_loader, val_loader, use_focal_loss=False):\n    \"\"\"Dataset balance analysis with weighted sampling consideration\"\"\"\n    print(\"📊 DATASET BALANCE ANALYSIS (WITH WEIGHTED SAMPLING)\")\n    print(\"=\" * 60)\n    \n    # Analyze training set with weighted sampling (first 10 batches)\n    print(\"Training set analysis (with WeightedRandomSampler):\")\n    train_occupied = 0\n    train_total = 0\n    \n    for i, batch in enumerate(train_loader):\n        if i >= 10:  # Only analyze first 10 batches\n            break\n        occupancy = batch['occupancy']\n        batch_occupied = occupancy.sum().item()\n        batch_total = occupancy.numel()\n        train_occupied += batch_occupied\n        train_total += batch_total\n        \n        print(f\"  Batch {i+1}: {batch_occupied}/{batch_total} occupied ({100*batch_occupied/batch_total:.1f}%)\")\n    \n    train_ratio = train_occupied / train_total\n    \n    # Analyze validation set (standard sampling)\n    print(\"\\nValidation set analysis (standard sampling):\")\n    val_occupied = 0\n    val_total = 0\n    \n    for i, batch in enumerate(val_loader):\n        if i >= 5:  # Only analyze first 5 batches\n            break\n        occupancy = batch['occupancy']\n        batch_occupied = occupancy.sum().item()\n        batch_total = occupancy.numel()\n        val_occupied += batch_occupied\n        val_total += batch_total\n        \n        print(f\"  Batch {i+1}: {batch_occupied}/{batch_total} occupied ({100*batch_occupied/batch_total:.1f}%)\")\n    \n    val_ratio = val_occupied / val_total\n    \n    # Print comprehensive results\n    print(f\"\\n📈 SAMPLING EFFECTIVENESS:\")\n    print(f\"Training occupied ratio (weighted): {100*train_ratio:.2f}%\")\n    print(f\"Validation occupied ratio (standard): {100*val_ratio:.2f}%\")\n    print(f\"Boost factor: {train_ratio/val_ratio:.1f}x improvement in positive class exposure\")\n    \n    if train_ratio > val_ratio * 2:\n        print(\"✅ Weighted sampling is working! Training sees much more positive examples.\")\n    else:\n        print(\"⚠️  Weighted sampling may need adjustment. Consider higher multiplier.\")\n    \n    # Loss function selection - use validation ratio for pos_weight calculation\n    # (since that represents the true data distribution)\n    if val_ratio < 0.2 or val_ratio > 0.8:\n        pos_weight = (1.0 - val_ratio) / val_ratio\n        print(f\"\\n🎯 Using pos_weight based on validation ratio: {pos_weight:.2f}\")\n        \n        pos_weight_tensor = torch.tensor([pos_weight], device=device)\n        \n        if use_focal_loss:\n            print(\"🎯 Using OPTIMIZED Focal Loss (α=0.5, γ=3) + WeightedSampler combo\")\n            return FocalLoss(alpha=0.5, gamma=3, pos_weight=pos_weight_tensor)\n        else:\n            print(\"🎯 Using balanced BCE Loss + WeightedSampler combo\")\n            return nn.BCEWithLogitsLoss(pos_weight=pos_weight_tensor)\n    else:\n        print(\"✅ Balanced dataset detected (rare with occupancy data)\")\n        if use_focal_loss:\n            return FocalLoss(alpha=0.5, gamma=3)\n        else:\n            return nn.BCEWithLogitsLoss()\n\n# Run analysis with weighted sampling\nprint(\"\\n2.5. DATASET ANALYSIS WITH WEIGHTED SAMPLING\")\nprint(\"-\" * 60)\n\n# Create optimized loss function that works with weighted sampling\noptimized_loss_fn = analyze_dataset_balance(train_loader, val_loader, use_focal_loss=True)\nprint(\"✓ Dataset analysis completed with weighted sampling integration\")\n\n# Also create a BCE version for comparison\nbalanced_loss_fn = analyze_dataset_balance(train_loader, val_loader, use_focal_loss=False)\nprint(\"✓ Alternative BCE loss function created\")","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:42:43.408140Z","iopub.execute_input":"2025-07-18T09:42:43.408905Z","iopub.status.idle":"2025-07-18T09:42:45.019771Z","shell.execute_reply.started":"2025-07-18T09:42:43.408877Z","shell.execute_reply":"2025-07-18T09:42:45.018845Z"},"trusted":true},"outputs":[{"name":"stdout","text":"\n2.5. DATASET ANALYSIS WITH WEIGHTED SAMPLING\n------------------------------------------------------------\n📊 DATASET BALANCE ANALYSIS (WITH WEIGHTED SAMPLING)\n============================================================\nTraining set analysis (with WeightedRandomSampler):\n  Batch 1: 160.0/16384 occupied (1.0%)\n  Batch 2: 136.0/16384 occupied (0.8%)\n  Batch 3: 169.0/16384 occupied (1.0%)\n  Batch 4: 166.0/16384 occupied (1.0%)\n  Batch 5: 164.0/16384 occupied (1.0%)\n  Batch 6: 123.0/16384 occupied (0.8%)\n  Batch 7: 226.0/16384 occupied (1.4%)\n  Batch 8: 132.0/16384 occupied (0.8%)\n  Batch 9: 161.0/16384 occupied (1.0%)\n  Batch 10: 176.0/16384 occupied (1.1%)\n\nValidation set analysis (standard sampling):\n  Batch 1: 189.0/16384 occupied (1.2%)\n  Batch 2: 147.0/16384 occupied (0.9%)\n  Batch 3: 154.0/16384 occupied (0.9%)\n  Batch 4: 166.0/16384 occupied (1.0%)\n  Batch 5: 146.0/16384 occupied (0.9%)\n\n📈 SAMPLING EFFECTIVENESS:\nTraining occupied ratio (weighted): 0.98%\nValidation occupied ratio (standard): 0.98%\nBoost factor: 1.0x improvement in positive class exposure\n⚠️  Weighted sampling may need adjustment. Consider higher multiplier.\n\n🎯 Using pos_weight based on validation ratio: 101.14\n🎯 Using OPTIMIZED Focal Loss (α=0.5, γ=3) + WeightedSampler combo\n✓ Dataset analysis completed with weighted sampling integration\n📊 DATASET BALANCE ANALYSIS (WITH WEIGHTED SAMPLING)\n============================================================\nTraining set analysis (with WeightedRandomSampler):\n  Batch 1: 162.0/16384 occupied (1.0%)\n  Batch 2: 172.0/16384 occupied (1.0%)\n  Batch 3: 143.0/16384 occupied (0.9%)\n  Batch 4: 148.0/16384 occupied (0.9%)\n  Batch 5: 118.0/16384 occupied (0.7%)\n  Batch 6: 178.0/16384 occupied (1.1%)\n  Batch 7: 189.0/16384 occupied (1.2%)\n  Batch 8: 204.0/16384 occupied (1.2%)\n  Batch 9: 177.0/16384 occupied (1.1%)\n  Batch 10: 218.0/16384 occupied (1.3%)\n\nValidation set analysis (standard sampling):\n  Batch 1: 217.0/16384 occupied (1.3%)\n  Batch 2: 118.0/16384 occupied (0.7%)\n  Batch 3: 136.0/16384 occupied (0.8%)\n  Batch 4: 180.0/16384 occupied (1.1%)\n  Batch 5: 130.0/16384 occupied (0.8%)\n\n📈 SAMPLING EFFECTIVENESS:\nTraining occupied ratio (weighted): 1.04%\nValidation occupied ratio (standard): 0.95%\nBoost factor: 1.1x improvement in positive class exposure\n⚠️  Weighted sampling may need adjustment. Consider higher multiplier.\n\n🎯 Using pos_weight based on validation ratio: 103.89\n🎯 Using balanced BCE Loss + WeightedSampler combo\n✓ Alternative BCE loss function created\n","output_type":"stream"}],"execution_count":55},{"cell_type":"markdown","source":"# Network","metadata":{"id":"3aDuW1oqbtu8"}},{"cell_type":"code","source":"class PositionalEncoding(nn.Module):\n    \"\"\"Positional encoding for 3D coordinates\"\"\"\n    def __init__(self, in_dim=3, num_frequencies=6):\n        super().__init__()\n        self.num_frequencies = num_frequencies\n        self.in_dim = in_dim\n        self.out_dim = in_dim * (2 * num_frequencies + 1)\n        \n    def forward(self, coords):\n        \"\"\"\n        Args:\n            coords: (B, N, 3) 3D coordinates\n        Returns:\n            encoded: (B, N, out_dim) positionally encoded coordinates\n        \"\"\"\n        batch_size, num_points, _ = coords.shape\n        \n        # Original coordinates\n        encoded = [coords]\n        \n        # Frequency encodings\n        for freq in range(self.num_frequencies):\n            for func in [torch.sin, torch.cos]:\n                encoded.append(func(2 ** freq * math.pi * coords))\n        \n        return torch.cat(encoded, dim=-1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-18T09:42:45.020956Z","iopub.execute_input":"2025-07-18T09:42:45.021544Z","iopub.status.idle":"2025-07-18T09:42:45.027114Z","shell.execute_reply.started":"2025-07-18T09:42:45.021517Z","shell.execute_reply":"2025-07-18T09:42:45.026345Z"}},"outputs":[],"execution_count":56},{"cell_type":"code","source":"class ResNetBlock(nn.Module):\n    \"\"\"ResNet block for PointNet\"\"\"\n    def __init__(self, in_channels, out_channels):\n        super().__init__()\n        self.conv1 = nn.Conv1d(in_channels, out_channels, 1)\n        self.bn1 = nn.BatchNorm1d(out_channels)\n        self.conv2 = nn.Conv1d(out_channels, out_channels, 1)\n        self.bn2 = nn.BatchNorm1d(out_channels)\n        \n        # Skip connection\n        if in_channels != out_channels:\n            self.skip = nn.Conv1d(in_channels, out_channels, 1)\n        else:\n            self.skip = nn.Identity()\n    \n    def forward(self, x):\n        identity = self.skip(x)\n        \n        out = F.relu(self.bn1(self.conv1(x)))\n        out = self.bn2(self.conv2(out))\n        \n        out += identity\n        return F.relu(out)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-18T09:42:45.027812Z","iopub.execute_input":"2025-07-18T09:42:45.028014Z","iopub.status.idle":"2025-07-18T09:42:45.043861Z","shell.execute_reply.started":"2025-07-18T09:42:45.027999Z","shell.execute_reply":"2025-07-18T09:42:45.043159Z"}},"outputs":[],"execution_count":57},{"cell_type":"code","source":"class ResNetPointNet(nn.Module):\n    \"\"\"ResNet-based PointNet encoder\"\"\"\n    def __init__(self, in_dim=3, c_dim=32, use_positional_encoding=True):\n        super().__init__()\n        \n        self.use_positional_encoding = use_positional_encoding\n        if use_positional_encoding:\n            self.pos_encoding = PositionalEncoding(in_dim, num_frequencies=6)\n            input_dim = self.pos_encoding.out_dim\n        else:\n            input_dim = in_dim\n        \n        # ResNet blocks\n        self.conv1 = nn.Conv1d(input_dim, 64, 1)\n        self.bn1 = nn.BatchNorm1d(64)\n        \n        self.resnet_blocks = nn.ModuleList([\n            ResNetBlock(64, 64),\n            ResNetBlock(64, 128),\n            ResNetBlock(128, 128),\n            ResNetBlock(128, 256),\n            ResNetBlock(256, c_dim)\n        ])\n    \n    def forward(self, points):\n        \"\"\"\n        Args:\n            points: (B, N, 3) input point cloud\n        Returns:\n            features: (B, N, c_dim) per-point features\n        \"\"\"\n        if self.use_positional_encoding:\n            points = self.pos_encoding(points)\n        \n        # Transpose for 1D conv: (B, N, C) -> (B, C, N)\n        x = points.transpose(2, 1)\n        \n        # Initial conv\n        x = F.relu(self.bn1(self.conv1(x)))\n        \n        # ResNet blocks\n        for block in self.resnet_blocks:\n            x = block(x)\n        \n        # Transpose back: (B, C, N) -> (B, N, C)\n        return x.transpose(2, 1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-18T09:42:45.044544Z","iopub.execute_input":"2025-07-18T09:42:45.044746Z","iopub.status.idle":"2025-07-18T09:42:45.061094Z","shell.execute_reply.started":"2025-07-18T09:42:45.044732Z","shell.execute_reply":"2025-07-18T09:42:45.060437Z"}},"outputs":[],"execution_count":58},{"cell_type":"code","source":"class DynamicPlanePredictor(nn.Module):\n    \"\"\"Predicts dynamic plane parameters and plane-specific features\"\"\"\n    def __init__(self, c_dim=32, num_planes=3):\n        super().__init__()\n        self.num_planes = num_planes\n        \n        # Simple PointNet for global context\n        self.pointnet = nn.Sequential(\n            nn.Conv1d(3, 64, 1),\n            nn.BatchNorm1d(64),\n            nn.ReLU(),\n            nn.Conv1d(64, 128, 1),\n            nn.BatchNorm1d(128),\n            nn.ReLU(),\n            nn.Conv1d(128, c_dim, 1),\n            nn.BatchNorm1d(c_dim)\n        )\n        \n        # Plane parameter predictor (a, b, c for each plane)\n        self.plane_predictor = nn.Sequential(\n            nn.Linear(c_dim, 64),\n            nn.ReLU(),\n            nn.Linear(64, num_planes * 3)\n        )\n        \n        # Plane-specific feature generator\n        self.plane_feature_generator = nn.Sequential(\n            nn.Linear(c_dim, 64),\n            nn.ReLU(),\n            nn.Linear(64, num_planes * c_dim)\n        )\n    \n    def forward(self, points):\n        \"\"\"\n        Args:\n            points: (B, N, 3) input point cloud\n        Returns:\n            plane_params: (B, num_planes, 3) plane normal vectors\n            plane_features: (B, num_planes, c_dim) plane-specific features\n        \"\"\"\n        batch_size = points.shape[0]\n        \n        # Global max pooling for plane prediction\n        x = points.transpose(2, 1)  # (B, 3, N)\n        x = self.pointnet(x)        # (B, c_dim, N)\n        global_features = torch.max(x, dim=2)[0]  # (B, c_dim)\n        \n        # Predict plane parameters\n        plane_params = self.plane_predictor(global_features)\n        plane_params = plane_params.view(batch_size, self.num_planes, 3)\n        \n        # Normalize plane normals\n        plane_params = F.normalize(plane_params, p=2, dim=2)\n        \n        # Generate plane-specific features\n        plane_features = self.plane_feature_generator(global_features)\n        plane_features = plane_features.view(batch_size, self.num_planes, -1)\n        \n        return plane_params, plane_features","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-18T09:42:45.061902Z","iopub.execute_input":"2025-07-18T09:42:45.062096Z","iopub.status.idle":"2025-07-18T09:42:45.075298Z","shell.execute_reply.started":"2025-07-18T09:42:45.062081Z","shell.execute_reply":"2025-07-18T09:42:45.074634Z"}},"outputs":[],"execution_count":59},{"cell_type":"code","source":"class DynamicPlaneProjector(nn.Module):\n    \"\"\"Projects features onto dynamic planes using basis change\"\"\"\n    def __init__(self, plane_resolution=64):\n        super().__init__()\n        self.plane_resolution = plane_resolution\n    \n    def get_rotation_matrix(self, normal_vectors):\n        \"\"\"\n        Compute rotation matrix to align z-axis with normal vector\n        Args:\n            normal_vectors: (B, L, 3) plane normal vectors\n        Returns:\n            R: (B, L, 3, 3) rotation matrices\n        \"\"\"\n        batch_size, num_planes, _ = normal_vectors.shape\n        device = normal_vectors.device\n        \n        # Target vector (z-axis)\n        k = torch.tensor([0., 0., 1.], device=device).expand(batch_size, num_planes, 3)\n        \n        # Normalize normals\n        n = F.normalize(normal_vectors, p=2, dim=2)\n        \n        # Compute rotation matrices\n        # v = k × n\n        v = torch.cross(k, n, dim=2)\n        \n        # Handle case where k and n are parallel\n        cos_angle = torch.sum(k * n, dim=2, keepdim=True)\n        sin_angle = torch.norm(v, p=2, dim=2, keepdim=True)\n        \n        # Skew-symmetric matrix [v]×\n        v_skew = torch.zeros(batch_size, num_planes, 3, 3, device=device)\n        v_skew[:, :, 0, 1] = -v[:, :, 2]\n        v_skew[:, :, 0, 2] = v[:, :, 1]\n        v_skew[:, :, 1, 0] = v[:, :, 2]\n        v_skew[:, :, 1, 2] = -v[:, :, 0]\n        v_skew[:, :, 2, 0] = -v[:, :, 1]\n        v_skew[:, :, 2, 1] = v[:, :, 0]\n        \n        # Identity matrix\n        I = torch.eye(3, device=device).expand(batch_size, num_planes, 3, 3)\n        \n        # Rodrigues' rotation formula\n        # R = I + [v]× + [v]×² * (1 - cos(θ)) / sin²(θ)\n        v_skew_squared = torch.matmul(v_skew, v_skew)\n        \n        # Avoid division by zero\n        sin_squared = sin_angle.unsqueeze(-1) ** 2\n        sin_squared = torch.clamp(sin_squared, min=1e-8)\n        \n        R = I + v_skew + v_skew_squared * (1 - cos_angle).unsqueeze(-1) / sin_squared\n        \n        # Handle parallel case (cos_angle ≈ ±1)\n        parallel_mask = (torch.abs(cos_angle) > 0.999).squeeze(-1)\n        R[parallel_mask] = I[parallel_mask]\n        \n        return R\n    \n    def project_to_plane(self, points, features, plane_params):\n        \"\"\"\n        Project features onto dynamic planes\n        Args:\n            points: (B, N, 3) 3D points\n            features: (B, N, C) point features\n            plane_params: (B, L, 3) plane parameters\n        Returns:\n            projected_features: (B, L, C, H, W) projected plane features\n        \"\"\"\n        batch_size, num_points, _ = points.shape\n        _, num_planes, _ = plane_params.shape\n        _, _, feature_dim = features.shape\n        \n        # Get rotation matrices\n        R = self.get_rotation_matrix(plane_params)  # (B, L, 3, 3)\n        \n        projected_features = []\n        \n        for plane_idx in range(num_planes):\n            # Get rotation matrix for this plane\n            R_plane = R[:, plane_idx, :, :]  # (B, 3, 3)\n            \n            # Apply rotation to points\n            rotated_points = torch.bmm(points, R_plane.transpose(1, 2))  # (B, N, 3)\n            \n            # Project to 2D (take x, y coordinates)\n            points_2d = rotated_points[:, :, :2]  # (B, N, 2)\n            \n            # Normalize to [0, resolution-1]\n            points_2d = (points_2d + 1) / 2 * (self.plane_resolution - 1)\n            points_2d = torch.clamp(points_2d, 0, self.plane_resolution - 1)\n            \n            # Initialize feature map\n            feature_map = torch.zeros(batch_size, feature_dim, \n                                    self.plane_resolution, self.plane_resolution,\n                                    device=points.device)\n            \n            # Scatter features to grid\n            for b in range(batch_size):\n                coords = points_2d[b].long()  # (N, 2)\n                coords_x = coords[:, 0]\n                coords_y = coords[:, 1]\n                \n                # Create linear indices\n                linear_indices = coords_y * self.plane_resolution + coords_x\n                \n                # Expand features for scattering\n                point_features = features[b].transpose(0, 1)  # (C, N)\n                \n                # Scatter (accumulate features at same locations)\n                feature_map[b].view(feature_dim, -1).index_add_(\n                    1, linear_indices, point_features\n                )\n            \n            projected_features.append(feature_map)\n        \n        # Stack along plane dimension\n        return torch.stack(projected_features, dim=1)  # (B, L, C, H, W)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-18T09:42:45.076000Z","iopub.execute_input":"2025-07-18T09:42:45.076208Z","iopub.status.idle":"2025-07-18T09:42:45.090415Z","shell.execute_reply.started":"2025-07-18T09:42:45.076193Z","shell.execute_reply":"2025-07-18T09:42:45.089752Z"}},"outputs":[],"execution_count":60},{"cell_type":"code","source":"class UNetBlock(nn.Module):\n    \"\"\"U-Net block for processing plane features\"\"\"\n    def __init__(self, in_channels, out_channels):\n        super().__init__()\n        self.conv1 = nn.Conv2d(in_channels, out_channels, 3, padding=1)\n        self.bn1 = nn.BatchNorm2d(out_channels)\n        self.conv2 = nn.Conv2d(out_channels, out_channels, 3, padding=1)\n        self.bn2 = nn.BatchNorm2d(out_channels)\n    \n    def forward(self, x):\n        x = F.relu(self.bn1(self.conv1(x)))\n        x = F.relu(self.bn2(self.conv2(x)))\n        return x","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-18T09:42:45.091180Z","iopub.execute_input":"2025-07-18T09:42:45.091470Z","iopub.status.idle":"2025-07-18T09:42:45.108285Z","shell.execute_reply.started":"2025-07-18T09:42:45.091444Z","shell.execute_reply":"2025-07-18T09:42:45.107644Z"}},"outputs":[],"execution_count":61},{"cell_type":"code","source":"class UNet2D(nn.Module):\n    \"\"\"2D U-Net for processing plane features\"\"\"\n    def __init__(self, in_channels=32, out_channels=32):\n        super().__init__()\n        \n        # Encoder\n        self.enc1 = UNetBlock(in_channels, 64)\n        self.enc2 = UNetBlock(64, 128)\n        self.enc3 = UNetBlock(128, 256)\n        \n        # Bottleneck\n        self.bottleneck = UNetBlock(256, 512)\n        \n        # Decoder\n        self.dec3 = UNetBlock(512 + 256, 256)\n        self.dec2 = UNetBlock(256 + 128, 128)\n        self.dec1 = UNetBlock(128 + 64, 64)\n        \n        # Output\n        self.output = nn.Conv2d(64, out_channels, 1)\n        \n        self.pool = nn.MaxPool2d(2)\n        self.upsample = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)\n    \n    def forward(self, x):\n        # Encoder\n        e1 = self.enc1(x)\n        e2 = self.enc2(self.pool(e1))\n        e3 = self.enc3(self.pool(e2))\n        \n        # Bottleneck\n        b = self.bottleneck(self.pool(e3))\n        \n        # Decoder\n        d3 = self.dec3(torch.cat([self.upsample(b), e3], dim=1))\n        d2 = self.dec2(torch.cat([self.upsample(d3), e2], dim=1))\n        d1 = self.dec1(torch.cat([self.upsample(d2), e1], dim=1))\n        \n        return self.output(d1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-18T09:42:45.112136Z","iopub.execute_input":"2025-07-18T09:42:45.112519Z","iopub.status.idle":"2025-07-18T09:42:45.123975Z","shell.execute_reply.started":"2025-07-18T09:42:45.112500Z","shell.execute_reply":"2025-07-18T09:42:45.123284Z"}},"outputs":[],"execution_count":62},{"cell_type":"code","source":"class TransONetDecoder(nn.Module):\n    \"\"\"TransONet decoder with bilinear interpolation\"\"\"\n    def __init__(self, c_dim=32, hidden_dim=128, num_planes=3):\n        super().__init__()\n        self.num_planes = num_planes\n        \n        # Decoder MLP\n        self.decoder = nn.Sequential(\n            nn.Linear(3 + num_planes * c_dim, hidden_dim),\n            nn.ReLU(),\n            nn.Linear(hidden_dim, hidden_dim),\n            nn.ReLU(),\n            nn.Linear(hidden_dim, hidden_dim),\n            nn.ReLU(),\n            nn.Linear(hidden_dim, 1)\n        )\n        \n        # Initialize final layer bias for better precision-recall balance\n        self.decoder[-1].bias.data.fill_(-2.0)\n    \n    def sample_plane_features(self, query_points, plane_features, plane_params):\n        \"\"\"\n        Sample features from planes using bilinear interpolation\n        Args:\n            query_points: (B, N, 3) query points\n            plane_features: (B, L, C, H, W) plane features\n            plane_params: (B, L, 3) plane parameters\n        Returns:\n            sampled_features: (B, N, L*C) sampled features\n        \"\"\"\n        batch_size, num_points, _ = query_points.shape\n        _, num_planes, feature_dim, H, W = plane_features.shape\n        \n        # Get rotation matrices\n        projector = DynamicPlaneProjector(H)\n        R = projector.get_rotation_matrix(plane_params)\n        \n        sampled_features = []\n        \n        for plane_idx in range(num_planes):\n            # Rotate query points to plane coordinate system\n            R_plane = R[:, plane_idx, :, :]  # (B, 3, 3)\n            rotated_points = torch.bmm(query_points, R_plane.transpose(1, 2))\n            \n            # Project to 2D and normalize to [-1, 1] for grid_sample\n            points_2d = rotated_points[:, :, :2]  # (B, N, 2)\n            \n            # Prepare for grid_sample: (B, N, 1, 2)\n            grid = points_2d.unsqueeze(2)\n            \n            # Sample features using bilinear interpolation\n            plane_feat = plane_features[:, plane_idx, :, :, :]  # (B, C, H, W)\n            sampled = F.grid_sample(plane_feat, grid, mode='bilinear', \n                                  padding_mode='border', align_corners=True)\n            \n            # Reshape: (B, C, N, 1) -> (B, N, C)\n            sampled = sampled.squeeze(-1).transpose(1, 2)\n            sampled_features.append(sampled)\n        \n        # Concatenate all plane features\n        return torch.cat(sampled_features, dim=2)  # (B, N, L*C)\n    \n    def forward(self, query_points, plane_features, plane_params):\n        \"\"\"\n        Args:\n            query_points: (B, N, 3) query points\n            plane_features: (B, L, C, H, W) processed plane features\n            plane_params: (B, L, 3) plane parameters\n        Returns:\n            occupancy_logits: (B, N) occupancy predictions\n        \"\"\"\n        batch_size, num_points, _ = query_points.shape\n        \n        # Sample features from planes\n        sampled_features = self.sample_plane_features(\n            query_points, plane_features, plane_params\n        )\n        \n        # Concatenate query points with sampled features\n        decoder_input = torch.cat([\n            query_points.view(batch_size * num_points, 3),\n            sampled_features.view(batch_size * num_points, -1)\n        ], dim=1)\n        \n        # Predict occupancy\n        occupancy_logits = self.decoder(decoder_input)\n        \n        return occupancy_logits.view(batch_size, num_points)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-18T09:42:45.124573Z","iopub.execute_input":"2025-07-18T09:42:45.124773Z","iopub.status.idle":"2025-07-18T09:42:45.138008Z","shell.execute_reply.started":"2025-07-18T09:42:45.124759Z","shell.execute_reply":"2025-07-18T09:42:45.137332Z"}},"outputs":[],"execution_count":63},{"cell_type":"code","source":"class SimilarityLoss(nn.Module):\n    \"\"\"Similarity loss to encourage diverse plane orientations\"\"\"\n    def __init__(self, min_angle_deg=45):\n        super().__init__()\n        self.min_angle_cos = math.cos(math.radians(min_angle_deg))\n    \n    def forward(self, plane_params):\n        \"\"\"\n        Args:\n            plane_params: (B, L, 3) plane normal vectors\n        Returns:\n            loss: similarity loss\n        \"\"\"\n        batch_size, num_planes, _ = plane_params.shape\n        \n        if num_planes < 2:\n            return torch.tensor(0.0, device=plane_params.device)\n        \n        total_loss = 0\n        num_pairs = 0\n        \n        for i in range(num_planes):\n            for j in range(i + 1, num_planes):\n                # Compute cosine similarity\n                normal_i = plane_params[:, i, :]  # (B, 3)\n                normal_j = plane_params[:, j, :]  # (B, 3)\n                \n                cos_sim = torch.sum(normal_i * normal_j, dim=1)  # (B,)\n                cos_sim = torch.abs(cos_sim)  # Handle both orientations\n                \n                # Penalize if angle is too small\n                loss = F.relu(cos_sim - self.min_angle_cos)\n                total_loss += loss.mean()\n                num_pairs += 1\n        \n        return total_loss / num_pairs if num_pairs > 0 else torch.tensor(0.0, device=plane_params.device)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-18T09:42:45.138616Z","iopub.execute_input":"2025-07-18T09:42:45.138791Z","iopub.status.idle":"2025-07-18T09:42:45.157877Z","shell.execute_reply.started":"2025-07-18T09:42:45.138777Z","shell.execute_reply":"2025-07-18T09:42:45.157135Z"}},"outputs":[],"execution_count":64},{"cell_type":"code","source":"class TransONet(nn.Module):\n    \"\"\"Complete TransONet architecture\"\"\"\n    def __init__(self, c_dim=32, num_dynamic_planes=3, plane_resolution=64, \n                 use_positional_encoding=True, use_similarity_loss=True):\n        super().__init__()\n        \n        self.c_dim = c_dim\n        self.num_dynamic_planes = num_dynamic_planes\n        self.use_similarity_loss = use_similarity_loss\n        \n        # Encoder components\n        self.point_encoder = ResNetPointNet(\n            in_dim=3, c_dim=c_dim, \n            use_positional_encoding=use_positional_encoding\n        )\n        \n        self.plane_predictor = DynamicPlanePredictor(\n            c_dim=c_dim, num_planes=num_dynamic_planes\n        )\n        \n        self.plane_projector = DynamicPlaneProjector(\n            plane_resolution=plane_resolution\n        )\n        \n        # U-Net for processing plane features (shared weights)\n        self.unet = UNet2D(in_channels=c_dim, out_channels=c_dim)\n        \n        # Decoder\n        self.decoder = TransONetDecoder(\n            c_dim=c_dim, hidden_dim=128, num_planes=num_dynamic_planes\n        )\n        \n        # Loss function\n        if use_similarity_loss:\n            self.similarity_loss = SimilarityLoss(min_angle_deg=45)\n    \n    def forward(self, point_cloud, query_points, return_plane_params=False):\n        \"\"\"\n        Args:\n            point_cloud: (B, N, 3) input point cloud\n            query_points: (B, M, 3) query points for occupancy prediction\n            return_plane_params: whether to return plane parameters\n        Returns:\n            occupancy_logits: (B, M) occupancy predictions\n            plane_params: (B, L, 3) plane parameters (if return_plane_params=True)\n        \"\"\"\n        # Encode point cloud\n        point_features = self.point_encoder(point_cloud)  # (B, N, c_dim)\n        \n        # Predict dynamic planes\n        plane_params, plane_features = self.plane_predictor(point_cloud)\n        \n        # Expand plane features to match per-point features\n        batch_size, num_points, _ = point_features.shape\n        expanded_plane_features = plane_features.unsqueeze(2).expand(\n            batch_size, self.num_dynamic_planes, num_points, self.c_dim\n        )\n        \n        # Sum plane-specific features with per-point features\n        combined_features = []\n        for plane_idx in range(self.num_dynamic_planes):\n            combined_feat = point_features + expanded_plane_features[:, plane_idx, :, :]\n            combined_features.append(combined_feat)\n        \n        # Project to dynamic planes\n        projected_features = []\n        for plane_idx in range(self.num_dynamic_planes):\n            projected = self.plane_projector.project_to_plane(\n                point_cloud, combined_features[plane_idx], \n                plane_params[:, plane_idx:plane_idx+1, :]\n            )\n            projected_features.append(projected[:, 0, :, :, :])  # Remove plane dim\n        \n        # Process with U-Net\n        processed_features = []\n        for plane_idx in range(self.num_dynamic_planes):\n            processed = self.unet(projected_features[plane_idx])\n            processed_features.append(processed)\n        \n        # Stack processed features\n        processed_features = torch.stack(processed_features, dim=1)  # (B, L, C, H, W)\n        \n        # Decode occupancy\n        occupancy_logits = self.decoder(query_points, processed_features, plane_params)\n        \n        if return_plane_params:\n            return occupancy_logits, plane_params\n        else:\n            return occupancy_logits\n    \n    def compute_similarity_loss(self, plane_params):\n        \"\"\"Compute similarity loss for plane parameters\"\"\"\n        if self.use_similarity_loss:\n            return self.similarity_loss(plane_params)\n        else:\n            return torch.tensor(0.0, device=plane_params.device)\n\ndef create_transonet_model(c_dim=32, num_dynamic_planes=3, plane_resolution=64, \n                          use_positional_encoding=True, use_similarity_loss=True):\n    \"\"\"Factory function to create TransONet model\"\"\"\n    return TransONet(\n        c_dim=c_dim,\n        num_dynamic_planes=num_dynamic_planes,\n        plane_resolution=plane_resolution,\n        use_positional_encoding=use_positional_encoding,\n        use_similarity_loss=use_similarity_loss\n    )\n\n# Example usage and integration with existing training loop\ndef update_training_loop_for_transonet(model, train_loader, optimizer, device, \n                                     criterion, similarity_loss_weight=0.1):\n    \"\"\"\n    Updated training loop that handles TransONet's similarity loss\n    \"\"\"\n    model.train()\n    total_loss = 0\n    total_occ_loss = 0\n    total_sim_loss = 0\n    \n    for batch_idx, batch in enumerate(train_loader):\n        point_cloud = batch['point_cloud'].to(device)\n        sample_points = batch['sample_points'].to(device)\n        occupancy = batch['occupancy'].to(device)\n        \n        optimizer.zero_grad()\n        \n        # Forward pass with plane parameters\n        occupancy_logits, plane_params = model(\n            point_cloud, sample_points, return_plane_params=True\n        )\n        \n        # Occupancy loss\n        occ_loss = criterion(occupancy_logits, occupancy)\n        \n        # Similarity loss\n        sim_loss = model.compute_similarity_loss(plane_params)\n        \n        # Total loss\n        total_loss_batch = occ_loss + similarity_loss_weight * sim_loss\n        \n        total_loss_batch.backward()\n        optimizer.step()\n        \n        total_loss += total_loss_batch.item()\n        total_occ_loss += occ_loss.item()\n        total_sim_loss += sim_loss.item()\n    \n    return {\n        'total_loss': total_loss / len(train_loader),\n        'occupancy_loss': total_occ_loss / len(train_loader),\n        'similarity_loss': total_sim_loss / len(train_loader)\n    }","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-18T09:42:45.158706Z","iopub.execute_input":"2025-07-18T09:42:45.159440Z","iopub.status.idle":"2025-07-18T09:42:45.179427Z","shell.execute_reply.started":"2025-07-18T09:42:45.159422Z","shell.execute_reply":"2025-07-18T09:42:45.178858Z"}},"outputs":[],"execution_count":65},{"cell_type":"markdown","source":"# Train","metadata":{"id":"gLHmzq5bbtu8"}},{"cell_type":"code","source":"class Trainer:\n    \"\"\"Training class for Lightweight ConvONet\"\"\"\n\n    def __init__(self, model, optimizer, device, loss_fn=None):\n        self.model = model\n        self.optimizer = optimizer\n        self.device = device\n        self.criterion = loss_fn or nn.BCEWithLogitsLoss()\n\n        # Training metrics\n        self.train_losses = []\n        self.val_losses = []\n        self.train_accuracies = []\n        self.val_accuracies = []\n\n    def train_epoch(self, train_loader):\n        \"\"\"Train for one epoch\"\"\"\n        self.model.train()\n        total_loss = 0\n        total_samples = 0\n        correct_predictions = 0\n\n        for batch_idx, batch in enumerate(train_loader):\n            point_cloud = batch['point_cloud'].to(self.device)\n            sample_points = batch['sample_points'].to(self.device)\n            occupancy = batch['occupancy'].to(self.device)\n\n            # Forward pass\n            self.optimizer.zero_grad()\n            occupancy_logits = self.model(point_cloud, sample_points)\n\n            # Compute loss\n            loss = self.criterion(occupancy_logits, occupancy)\n\n            # Backward pass\n            loss.backward()\n            self.optimizer.step()\n\n            # Statistics\n            total_loss += loss.item() * point_cloud.size(0)\n            total_samples += point_cloud.size(0)\n\n            # Accuracy\n            predictions = torch.sigmoid(occupancy_logits) > 0.5\n            correct_predictions += (predictions == occupancy).sum().item()\n\n            if batch_idx % 10 == 0:\n                print(f'Batch {batch_idx}/{len(train_loader)}, Loss: {loss.item():.4f}')\n\n        avg_loss = total_loss / total_samples\n        accuracy = correct_predictions / (total_samples * SAMPLE_POINTS)\n\n        return avg_loss, accuracy\n\n    def validate(self, val_loader):\n        \"\"\"Validate the model\"\"\"\n        self.model.eval()\n        total_loss = 0\n        total_samples = 0\n        correct_predictions = 0\n\n        with torch.no_grad():\n            for batch in val_loader:\n                point_cloud = batch['point_cloud'].to(self.device)\n                sample_points = batch['sample_points'].to(self.device)\n                occupancy = batch['occupancy'].to(self.device)\n\n                # Forward pass\n                occupancy_logits = self.model(point_cloud, sample_points)\n                loss = self.criterion(occupancy_logits, occupancy)\n\n                # Statistics\n                total_loss += loss.item() * point_cloud.size(0)\n                total_samples += point_cloud.size(0)\n\n                # Accuracy\n                predictions = torch.sigmoid(occupancy_logits) > 0.5\n                correct_predictions += (predictions == occupancy).sum().item()\n\n        avg_loss = total_loss / total_samples\n        accuracy = correct_predictions / (total_samples * SAMPLE_POINTS)\n\n        return avg_loss, accuracy\n\n    def train(self, train_loader, val_loader, num_epochs):\n        print(\"Starting training...\")\n        print(f\"Model parameters: {count_parameters(self.model):,}\")\n\n        best_val_loss = float('inf')\n\n        # Progress bar for epochs\n        epoch_pbar = tqdm(range(num_epochs), desc=\"Training Progress\")\n\n        for epoch in epoch_pbar:\n            start_time = time.time()\n\n            # Train with batch progress bar\n            train_loss, train_acc = self.train_epoch_with_progress(train_loader, epoch)\n            self.train_losses.append(train_loss)\n            self.train_accuracies.append(train_acc)\n\n            # Validate\n            if epoch % EVAL_INTERVAL == 0:\n                val_loss, val_acc = self.validate(val_loader)\n                self.val_losses.append(val_loss)\n                self.val_accuracies.append(val_acc)\n\n                # Real-time plotting\n                self.plot_live_progress()\n\n                # Update progress bar\n                epoch_pbar.set_postfix({\n                    'Train_Loss': f'{train_loss:.4f}',\n                    'Val_Loss': f'{val_loss:.4f}',\n                    'Train_Acc': f'{train_acc:.4f}',\n                    'Val_Acc': f'{val_acc:.4f}'\n                })\n\n                # Save best model\n                if val_loss < best_val_loss:\n                    best_val_loss = val_loss\n                    save_checkpoint(self.model, self.optimizer, epoch, val_loss,\n                                os.path.join(MODEL_SAVE_PATH, 'best_model.pth'))\n\n    def plot_live_progress(self):\n        clear_output(wait=True)\n        fig, axes = plt.subplots(1, 2, figsize=(12, 4))\n\n        # Loss plot\n        axes[0].plot(self.train_losses, label='Train Loss', color='blue')\n        if self.val_losses:\n            val_epochs = [i * EVAL_INTERVAL for i in range(len(self.val_losses))]\n            axes[0].plot(val_epochs, self.val_losses, label='Val Loss', color='red')\n        axes[0].set_title('Loss Progress')\n        axes[0].legend()\n        axes[0].grid(True)\n\n        # Accuracy plot\n        axes[1].plot(self.train_accuracies, label='Train Acc', color='blue')\n        if self.val_accuracies:\n            val_epochs = [i * EVAL_INTERVAL for i in range(len(self.val_accuracies))]\n            axes[1].plot(val_epochs, self.val_accuracies, label='Val Acc', color='red')\n        axes[1].set_title('Accuracy Progress')\n        axes[1].legend()\n        axes[1].grid(True)\n\n        plt.tight_layout()\n        plt.show()\n\n    def train_epoch_with_progress(self, train_loader, epoch):\n        self.model.train()\n        total_loss = 0\n        total_samples = 0\n        correct_predictions = 0\n\n        batch_pbar = tqdm(train_loader, desc=f\"Epoch {epoch+1}\", leave=False)\n\n        for batch_idx, batch in enumerate(batch_pbar):\n            point_cloud = batch['point_cloud'].to(self.device)\n            sample_points = batch['sample_points'].to(self.device)\n            occupancy = batch['occupancy'].to(self.device)\n\n            self.optimizer.zero_grad()\n            occupancy_logits = self.model(point_cloud, sample_points)\n            loss = self.criterion(occupancy_logits, occupancy)\n            loss.backward()\n            self.optimizer.step()\n\n            total_loss += loss.item() * point_cloud.size(0)\n            total_samples += point_cloud.size(0)\n\n            predictions = torch.sigmoid(occupancy_logits) > 0.5\n            correct_predictions += (predictions == occupancy).sum().item()\n\n            batch_pbar.set_postfix({'Loss': f'{loss.item():.4f}'})\n\n        avg_loss = total_loss / total_samples\n        accuracy = correct_predictions / (total_samples * SAMPLE_POINTS)\n        return avg_loss, accuracy","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:43:51.853748Z","iopub.execute_input":"2025-07-18T09:43:51.854487Z","iopub.status.idle":"2025-07-18T09:43:51.871243Z","shell.execute_reply.started":"2025-07-18T09:43:51.854461Z","shell.execute_reply":"2025-07-18T09:43:51.870545Z"},"trusted":true},"outputs":[],"execution_count":67},{"cell_type":"code","source":"\nclass TransONetTrainer(Trainer):\n    \"\"\"Enhanced trainer for TransONet with similarity loss\"\"\"\n    \n    def __init__(self, model, optimizer, device, loss_fn=None, similarity_loss_weight=0.1):\n        super().__init__(model, optimizer, device, loss_fn)\n        self.similarity_loss_weight = similarity_loss_weight\n        \n        # Track additional metrics\n        self.similarity_losses = []\n    \n    def train_epoch_with_progress(self, train_loader, epoch):\n        \"\"\"Train epoch with similarity loss\"\"\"\n        self.model.train()\n        total_loss = 0\n        total_occ_loss = 0\n        total_sim_loss = 0\n        total_samples = 0\n        correct_predictions = 0\n\n        batch_pbar = tqdm(train_loader, desc=f\"Epoch {epoch+1}\", leave=False)\n\n        for batch_idx, batch in enumerate(batch_pbar):\n            point_cloud = batch['point_cloud'].to(self.device)\n            sample_points = batch['sample_points'].to(self.device)\n            occupancy = batch['occupancy'].to(self.device)\n\n            self.optimizer.zero_grad()\n            \n            # Forward pass with plane parameters\n            occupancy_logits, plane_params = self.model(\n                point_cloud, sample_points, return_plane_params=True\n            )\n            \n            # Occupancy loss\n            occ_loss = self.criterion(occupancy_logits, occupancy)\n            \n            # Similarity loss (encourage diverse plane orientations)\n            sim_loss = self.model.compute_similarity_loss(plane_params)\n            \n            # Combined loss\n            total_loss_batch = occ_loss + self.similarity_loss_weight * sim_loss\n            \n            total_loss_batch.backward()\n            self.optimizer.step()\n\n            # Statistics\n            total_loss += total_loss_batch.item() * point_cloud.size(0)\n            total_occ_loss += occ_loss.item() * point_cloud.size(0)\n            total_sim_loss += sim_loss.item() * point_cloud.size(0)\n            total_samples += point_cloud.size(0)\n\n            predictions = torch.sigmoid(occupancy_logits) > 0.5\n            correct_predictions += (predictions == occupancy).sum().item()\n\n            batch_pbar.set_postfix({\n                'Loss': f'{total_loss_batch.item():.4f}',\n                'OccLoss': f'{occ_loss.item():.4f}',\n                'SimLoss': f'{sim_loss.item():.4f}'\n            })\n\n        avg_loss = total_loss / total_samples\n        avg_occ_loss = total_occ_loss / total_samples\n        avg_sim_loss = total_sim_loss / total_samples\n        accuracy = correct_predictions / (total_samples * SAMPLE_POINTS)\n        \n        # Store similarity loss for monitoring\n        self.similarity_losses.append(avg_sim_loss)\n        \n        return avg_loss, accuracy","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-18T09:43:52.078277Z","iopub.execute_input":"2025-07-18T09:43:52.078848Z","iopub.status.idle":"2025-07-18T09:43:52.086863Z","shell.execute_reply.started":"2025-07-18T09:43:52.078826Z","shell.execute_reply":"2025-07-18T09:43:52.086122Z"}},"outputs":[],"execution_count":68},{"cell_type":"code","source":"def create_transonet_model_and_optimizer():\n    \"\"\"Create TransONet model and optimizer\"\"\"\n    model = create_transonet_model(\n        c_dim=32,\n        num_dynamic_planes=3,\n        plane_resolution=64,\n        use_positional_encoding=True,\n        use_similarity_loss=True\n    ).to(device)\n    \n    optimizer = optim.Adam(model.parameters(), lr=3e-4, weight_decay=1e-5)\n    print(f\"TransONet created with {count_parameters(model):,} parameters\")\n    return model, optimizer","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:43:56.132022Z","iopub.execute_input":"2025-07-18T09:43:56.132278Z","iopub.status.idle":"2025-07-18T09:43:56.137185Z","shell.execute_reply.started":"2025-07-18T09:43:56.132260Z","shell.execute_reply":"2025-07-18T09:43:56.136417Z"},"id":"s5cZ6524btu9","trusted":true},"outputs":[],"execution_count":69},{"cell_type":"markdown","source":"## Model Creation","metadata":{"id":"lifk223Nbtu9"}},{"cell_type":"code","source":"print(\"\\n3. MODEL CREATION\")\nprint(\"-\" * 40)\n\nmodel, optimizer = create_transonet_model_and_optimizer()\nprint(\"✓ Model created\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"execution":{"iopub.status.busy":"2025-07-18T09:43:56.543055Z","iopub.execute_input":"2025-07-18T09:43:56.543297Z","iopub.status.idle":"2025-07-18T09:43:57.640156Z","shell.execute_reply.started":"2025-07-18T09:43:56.543280Z","shell.execute_reply":"2025-07-18T09:43:57.639365Z"},"id":"_17bIQjFbtu9","outputId":"5fab7d5b-0046-454c-adea-2fd9fbdc85c8","trusted":true},"outputs":[{"name":"stdout","text":"\n3. MODEL CREATION\n----------------------------------------\nTransONet created with 8,106,378 parameters\n✓ Model created\n","output_type":"stream"}],"execution_count":70},{"cell_type":"code","source":"print(\"\\n4. TRAINING\")\nprint(\"-\" * 60)\n\n# Use optimized loss function that complements weighted sampling\ntrainer = TransONetTrainer(model, optimizer, device, optimized_loss_fn, similarity_loss_weight=0.1)\n\nprint(\"\\\\n4. TRAINING WITH TRANSONET\")\nprint(\"-\" * 40)\n\nprint(\"🚀 TransONet improvements:\")\nprint(\"  ✓ Dynamic plane prediction (learns optimal orientations)\")\nprint(\"  ✓ ResNet PointNet encoder (better feature extraction)\")\nprint(\"  ✓ Plane-specific features (individual plane processing)\")\nprint(\"  ✓ U-Net plane processing (better spatial understanding)\")\nprint(\"  ✓ Similarity loss (diverse plane orientations)\")\nprint(\"  ✓ Positional encoding (improved spatial representation)\")\nprint(\"  ✓ Bilinear interpolation (smoother feature sampling)\")\n\nprint(\"\\\\n🎯 Expected improvements:\")\nprint(\"  • Reduced over-prediction (better plane alignment)\")\nprint(\"  • Improved precision (learned vs fixed planes)\")\nprint(\"  • Better fine detail reconstruction\")\nprint(\"  • More stable training with similarity loss\")\n\ntrainer.train(train_loader, val_loader, NUM_EPOCHS)\nprint(\"✅ TransONet training completed!\")","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":308,"referenced_widgets":["9201c7c60c204db6afa16d11af54058d","0dfc33ffd0f8494680472579dcbc03bd","e6bb160e7e544503abb7240c310031f2","4f0d239ac0624f9d8d97c5a3790350b6","811ac91cf3b4497fa589c5d304f51cce","a22fd5267fff4fceaad020d676d1d001","b511aafee1124d91809f54e719d0cf6a","d263276f112741f08a518afee9caa719","6a947826fef741f0ae23b1a7817fc814","0ce9670583664a1e99b52fa8cc6baf75","027f8877f8734a2c83b0fae888240fbd","fb3891597ea9460e86f3dfd49075b4ba","f9dfa67539dd43119035356c9cfa9e5e","adf14e3cb7f44be386045693563bbf7a","fc92882542f34942a02591c4a3ece0e1","99c48ae44aa244f3b1e3c1eebcccad3a","b74e8e48d2984f719ed2551806bb5ad9","0f1fc0650c0d46a78ef7c5fe782b007b","951bd0d350fa486eab12d0bfa346b50e","ee736ced3aec4e699984f6692067d9a4","3f2b0a1be8114d45966e6bce4cd54ce7","cd20bae009a14c89aa06a533fe4e3c6a","21ae14ec8c4e459887fa65b899698e1b","771952935eb0498099f7e0c36261d4d4","4454cd61ef7841179a0b230974e15f07","fea35edfc80e45d4b6d743609dabcf23","871eb867c8904f53baf93eed25d409c3","4049931103e84e9689fbc7b6d8cf51ed","a811d2dea2b044919439b57b43d42df0","fac84f13432f493384471c6d167692dd","bc15b89681504604bcad556e5dc8fe19","13a6220857b940e4981900e9ff0438ce","dedc344d054c4845a1ef51a968cf9286","5c17beaa40db4c72ba80225d6a36a2bb","1610cb2b9e9f4f2fa831ec496229c164","d7a9c18b61ba4006a78fffb6dc8087dc","17d2ed77d5584c1e93e73383f855408f","784e88cfcd5d4755aea4375347eeb3ee","22361df0f8f84b10bd9ba5a7d40a650b","ff7f60dfa58342208542887c3416d5be","e6ad4fab72534d98bb3ed628e6c09c92","c29b151f0cb04654833e22ad1038020d","5ca6417bdbd247acb07124de2537b7df","a4ae0c3aa49d4bad8d234b4cc6b0d8cd","d9d1c4364e134aa383e41bb1ba2f277d","34e77af347c34d91b0f37b742fd5da2b","749e7c42be5d4e378f86fec401d58a08","490d35904bf340cdb3c79d1c4fd0dae1","fc4228fce15a45beb7db5182a29dbf37","a607f89665164cb4b0fe428fbdd4b737","d8ded99e868140b4aa844a1d782ad7e2","10a126fc30c44de0904de3c07aaf1926","fe51cfe1d7114fdf9ff98121c8de8937","ffb05423c3544374a30cc7d42811c49d","539c32be991944618f25514169f0b6ad","b052ef4c6f9f4f71bd23972408c72fc0","3ba4c0a13ed34c96ba64b2009b2c1434","6c5a341f329a4b72808a5297ac165ce5","3422ee026f0c42ffac701c4f5b8019e9","230879dc4fb64d27af96469a86ca14b6","437d8abf2abc4ee49b80fbe5af10aa9a","501d834bcca24e62a09b72adc14c2946","4117e89279f84980b92c066d5b54cd3d","165e812fc9f34e7e9917a63c635d91e6","2d860b45d2d648e4a6fe5729ac1ae8f4","0123659f56c544c4847d2849c5c42bf1","ebc15dec7c4a4947926a96a48eca27d3","04ed05705f424796b34cd1b7aaa97060","447982e29c9e42168e6e85e7eec3ebce","c6a54aeb16c345ccb99a06cd3f7c4efe","127bb77f7877481a91bd426d6360fe87","5fb91afe71054cdca16fda4981f607eb","a58d4649f482451cb9e643d64df0ae09","d057e4365a7a42ed8cb85ceddb9574a7","4fe65eb670484e5f8167c666f946e74d","929750ec0780441aab6c1f027024b250","64c5098cb60f4fdf9630eed573411127","bdb4e7df3d544372b704ca9f1157160a","e4d6f61659bf4d42988358811a083f52","e88c3b9d6b6f44878f8f8eb98a3445d3","6685000345f945b78be1a41d2bd92d8b","c1ccacae7654442f8932fb09056c6ff9","427bd640e87248ac94d205ed6b88965a","b30b9bfc1e364e23b48ca761d2c66e69","2d4f22c26e464403ba7bb9d32d3aeaa1","a404b92bd10d45a59860231b0bcae9e3","70d53f3219e94891aa8887f0f9ad27d5","ebb061ea487040618c9ecca43dcf2b1c","b653f3becf5146539fb02570f5b8c681","7855d4683c074259af8bd14cf5870c32","d7608aae30f64d73aaf269a00b2395fd","8d0ecb1e89f94cf5aeb85418ea2ef8e2","bd8a5fc875d943e2b62885033b9284c1","ed672051c1d24f92ad6300bcbe69146d","f6b1daece7a44d0eac19e11ac82bd687","b5ed164da4194cb7b94faddf81fc38ec","85deafbf87c24a5c8d03f34929e46345","c7515a5e98ec44978935a1174ca719d5","72aebe1f96604f9c99deb10029560983","7770957224784738a68f47a0b4e9fee7","7b699cf7e2a94751a715020e278a4d82","1bb0382a4ffe42d0aba5402402e1db01","3cbbebf77d6d477688b053dac4ce4bb1","d7b2b562383942e59560f4dbb7d36f03","5bb3076b7bf44edbb12aada44d141b5c","c2a88bd91401427b97d68bfc2abe2645","5312f8e0555544b48c858375b290ba36","98befeebf8244ad397e281821b6f2c1c","f2a93e69d6944f3db650674aa122bdfc","6cf45a2756ef4677b0ebef4a00414e58","c4b9aefb173848249f03c4cbc919a615","3b989b1b5ddc4ec290019373b18e26b8","55675a57497248eebd8b040602961052","bbf84e587306489a9b113d4aaf85768c","7e276a4402e74011a1fe008cbbda7be7","9ac0cce52d854a40a31f07b74b70f311","593c020a11964428b4df5d9bfc46e808","2c8823ea69da440f91814657938c8a00","e67aa1409fde45fea49fa8c1e577a200","434d414f8e2d4737a3e7d0387a40a727","d97f07dd4c62409892740af64de60356","af4def9b88624dafaf27dda0d63d1977","ddfc6a8e63db499f9321bbf9deb32679","522a941a581d44bea9afb6ffbb6acd9c","4c44887eccad487ba122dd62e7e3554c","027ce4fad9884e34801e3809862cd3fa","c31d78decfbb455db7a5c1d7ba3a6759","31287ca0b2884488aa37cbd0e15cc7a5","bbf6eb1f65ef44c996665fdd4c360f7c","514df4728c1a47eda02a4919c28a52fa","af055e25954c45bdbf635d5ac75ee9a0","f210abfce5a8421d9aede204d0cf3639","a62a6bbec072499f995e4f283f8626ef","0f7cf59c3d8143d9aa4803c69239b745","cab87bfebc0b4691adb41068c1cefda9","1fe26c1898d64f56b0257005303d6457","ba80c523a61b44c793c4392c9374af81","de7f69fec71f4030a74a1ce6e8a6e539","32c5e01fd1194aab9ad85ae4105731b1","90dad9f767b548ca953ee2f5d1466212","ced7fabcaff7400b8f8227aaebe95ff5","d34aedf870014f72b1f487a65a5cfa4e","116e4b2f7ce642be98d76e6008921b5a","d4ff1941f45b4a208dd85c749670b43a","914f575a466947558cafec0197926eb5","54fd426060024d2a98a8ebf4f7751467","cb58c313644a496b9dbb89e79515c752","adc29804b1a64e458b954228e2fd6016","ab329e899c83449c99d76e5060bb9045","a9953580f40949faa1c045d41d86f831","213948be6f6c4660bc97f0cc9f953a91","ccff0c8ac48c4320a993f843f1dff408","8709725076b64bfa91ff1c84f6b38e3f","d29e006b22e3466c84479f2b6e13af65","202323e1a59e44888f8aca0041c89c58","ca43e8a26e28415d8d7ababbea6708b5","0c7e135ec45b48999ab80e74767306d2","fc483bf83e1f4ea7bd39e7fced6ec7ce","6d32d0044a5948a6820678825ce03fdc","b39663147e414fabb6775378c7328d10","3cea1b54881d4cf6aa1b630ef0182c37","1e505002abc44be6bdb9031027cf7ff8","fdf125bfed6149c2b6a752e7322ee376","6a9c246749dc47c3b3259192aa38e5ae","5b4f3dd7e914438f968b77d9cf21cd78","b54176ed61dd4a5585135d4614423866","d0ca4ac294564cb489448c5fde22e5b3","8b19693ed2d142878bc9f55cee064f23","e92f14cecfca479aa755eee9d030397f","2acff6a5b3004586bc50dd0fd4563c97","f0aab8fd0e2741dd8b0f387c28fee534","e9e46080f5bd4ae9bc5ed4b6b41ae122","6f9ff4ecc9904fa78236e0945f73ce56","364c6531049346579731eb519dff0c8d","b78d7bdd51f44b6b8d49053f330238ed","6d25a08a95084ba9a4cfd7291169ce21","1820352e7782407b86c5364d75405ccb","002ab4272ff34344bd983cd2bcd0e9ee","506086a90df0415199bbd7f53ad1771d","99c80e3f01034cc9bcadf783d4095135","ce2721ab0fb141fcae4c9addabed1175","a6b7562396d349998576b90bc97f55ed","34c7edfe77404feab108aeeb483c54c3","7797331aceaa425ebba175e8cd49a89c","88afd2c8adfb4308bc8893dd70aaf677","d7ba51c69d3f435098208f97614ff7d4","4f55a4bdd59f4f06a7c6f054f9a31b26","1aab7f8969b4470bb802b533734cc544","bf4380c708d742ce94c2954afcb55a89","c9eca82ed0fc4428a9ee1219e03a436b","f946ad05ec7b4b3d9b9f172d7b4d300d","38f26e0bcd0b4912a663d571b6e4508d","c8591f2e60b7474daf58344b45c44aa9","a299f60a8ada41208fc710230605154b","8e78d2bf9db94d48ad7f8ef4511ec85a","6db77b9a994441749dfc2d99a32c9535","cb950abc3769461f9f52b4cec18a9240","fa378e92781e4bbc9ce875fed4b93055","1119a194972a48c0ab0bb7d2dd25c5ed","7d756e58bdb443808351a635e5400e48","b0c34be31c1d49ee9a94c0b84278d6e9","afdb896e821a4a20821fc9655491fb69","3996566471844880a9777f37f089a56b","3564545ae1e1482c881e6d2ca80bdf77","3e17a25ef0c0456ba62e1e28f5dc9fa2","40880ef8f5a34d0aa38318c24b6dba93","fb8e035bc68e462baf7019f2ca846ec1","e627da13270d4d63af1a05ece8125034","f268bb7a07854e69a6adb3a5d01682ae","38db0f3a62014c1992c4c43faa5d0e30","52c9901210ac4801ade58c318cb21ca4","cb6de93595944f2eaeb67212c50a63f6","b93c34029fde41eab7dc9780949bbf53","e11d5ed1aeba4c748a89bbd2b9fdd880","6952c442784f43f5b5fc92519a98458b","9e47ba0b2b754f00880c55cb41afcbb4","e42f2a884e3e4313a02b2bb73a234304","5b6b0f16d37444dcaaa0c357d78b5c96","ee571c8a1a094ee88682e1e5be223b02","eb3cb6086407484d8ba5496a210e6cfe","81512f78c4064a0bbaf60a1afd3de5ec","aedd00913dbf4d68a3b7e1a1b4aa9d17","8f83ee5fd6394db6923156f670efddda","5953b8c8b45c4b48bf41b2f2b5e6375e","db588b19059847f5bd27e490fa0c4789","cccdde2296644b3b913ffd6e1cad1868","e1c43a3a38054615b994a179579b18e2","33579d8933f4418aa68d9b75d9a6d98f","cbc1648b5f87422bb04634bccc4dfae5","7157fba38b5748eea224b2b5f06a2d80","73e6a5c4a6054f178dfeebfe83de9514"]},"id":"au89QGXgbtu9","outputId":"b3dfc9c9-b8c8-401c-ca25-cd1db4a5efc4","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def plot_training_curves(trainer):\n    \"\"\"Plot training and validation curves\"\"\"\n    fig, axes = plt.subplots(1, 2, figsize=(12, 5))\n\n    # Loss curves\n    axes[0].plot(trainer.train_losses, label='Train Loss')\n    if trainer.val_losses:\n        val_epochs = [i * EVAL_INTERVAL for i in range(len(trainer.val_losses))]\n        axes[0].plot(val_epochs, trainer.val_losses, label='Validation Loss')\n    axes[0].set_xlabel('Epoch')\n    axes[0].set_ylabel('Loss')\n    axes[0].set_title('Training and Validation Loss')\n    axes[0].legend()\n    axes[0].grid(True)\n\n    # Accuracy curves\n    axes[1].plot(trainer.train_accuracies, label='Train Accuracy')\n    if trainer.val_accuracies:\n        val_epochs = [i * EVAL_INTERVAL for i in range(len(trainer.val_accuracies))]\n        axes[1].plot(val_epochs, trainer.val_accuracies, label='Validation Accuracy')\n    axes[1].set_xlabel('Epoch')\n    axes[1].set_ylabel('Accuracy')\n    axes[1].set_title('Training and Validation Accuracy')\n    axes[1].legend()\n    axes[1].grid(True)\n\n    plt.tight_layout()\n    plt.savefig(os.path.join(RESULTS_PATH, 'training_curves.png'), dpi=300, bbox_inches='tight')\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:48:15.104772Z","iopub.execute_input":"2025-07-18T09:48:15.105067Z","iopub.status.idle":"2025-07-18T09:48:15.112661Z","shell.execute_reply.started":"2025-07-18T09:48:15.105038Z","shell.execute_reply":"2025-07-18T09:48:15.111993Z"},"id":"1ugo1Py-btu9","trusted":true},"outputs":[],"execution_count":72},{"cell_type":"code","source":"print(\"\\n5. TRAINING CURVES\")\nprint(\"-\" * 40)\n\nplot_training_curves(trainer)\nprint(\"✓ Plots generated\")","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":408},"id":"vUdshSaYbtu-","outputId":"29dd5d00-ec45-441b-d56c-be2762581198","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Test","metadata":{"id":"OMdNJ2eJbtu-"}},{"cell_type":"code","source":"class ComprehensiveEvaluator:\n    \"\"\"Comprehensive evaluation class for 3D reconstruction metrics\"\"\"\n\n    def __init__(self, model, device):\n        self.model = model\n        self.device = device\n\n    def compute_iou(self, occ1, occ2):\n        \"\"\"Compute Intersection over Union (IoU) for occupancy values\"\"\"\n        occ1 = np.asarray(occ1)\n        occ2 = np.asarray(occ2)\n        \n        # Convert to boolean values\n        occ1 = (occ1 >= 0.5)\n        occ2 = (occ2 >= 0.5)\n        \n        # Compute IOU\n        area_union = (occ1 | occ2).astype(np.float32).sum(axis=-1)\n        area_intersect = (occ1 & occ2).astype(np.float32).sum(axis=-1)\n        \n        # Avoid division by zero\n        iou = np.divide(area_intersect, area_union, out=np.zeros_like(area_intersect), where=area_union!=0)\n        return iou\n\n    def distance_p2p(self, points_src, points_tgt, normals_src=None, normals_tgt=None):\n        \"\"\"Compute point-to-point distances using KD-tree\"\"\"\n        try:\n            from scipy.spatial import KDTree\n        except ImportError:\n            # Fallback to basic distance computation\n            return self._distance_p2p_fallback(points_src, points_tgt, normals_src, normals_tgt)\n        \n        kdtree = KDTree(points_tgt)\n        dist, idx = kdtree.query(points_src)\n        \n        normals_dot_product = None\n        if normals_src is not None and normals_tgt is not None:\n            # Normalize normals\n            normals_src = normals_src / np.linalg.norm(normals_src, axis=-1, keepdims=True)\n            normals_tgt = normals_tgt / np.linalg.norm(normals_tgt, axis=-1, keepdims=True)\n            \n            # Compute dot product\n            normals_dot_product = (normals_tgt[idx] * normals_src).sum(axis=-1)\n            # Handle normals that point into wrong direction gracefully\n            normals_dot_product = np.abs(normals_dot_product)\n        \n        return dist, normals_dot_product\n\n    def _distance_p2p_fallback(self, points_src, points_tgt, normals_src=None, normals_tgt=None):\n        \"\"\"Fallback distance computation without scipy\"\"\"\n        distances = []\n        for point in points_src:\n            dists = np.linalg.norm(points_tgt - point, axis=1)\n            distances.append(np.min(dists))\n        \n        return np.array(distances), None\n\n    def eval_pointcloud(self, pointcloud, pointcloud_tgt, normals=None, normals_tgt=None):\n        \"\"\"Evaluate point cloud reconstruction metrics\"\"\"\n        # Completeness: how far are the points of the target point cloud\n        # from the predicted point cloud\n        completeness, completeness_normals = self.distance_p2p(\n            pointcloud_tgt, pointcloud, normals_tgt, normals)\n        \n        # Accuracy: how far are the points of the predicted pointcloud\n        # from the target pointcloud\n        accuracy, accuracy_normals = self.distance_p2p(\n            pointcloud, pointcloud_tgt, normals, normals_tgt)\n        \n        # Chamfer distance L1\n        chamferL1 = 0.5 * (completeness.mean() + accuracy.mean())\n        \n        # Chamfer distance L2\n        chamferL2 = 0.5 * (np.power(completeness, 2).mean() + np.power(accuracy, 2).mean())\n        \n        return {\n            'completeness': completeness.mean(),\n            'accuracy': accuracy.mean(),\n            'chamfer_l1': chamferL1,\n            'chamfer_l2': chamferL2,\n            'completeness_normals': completeness_normals.mean() if completeness_normals is not None else None,\n            'accuracy_normals': accuracy_normals.mean() if accuracy_normals is not None else None,\n            'completeness_std': completeness.std(),\n            'accuracy_std': accuracy.std()\n        }\n\n    def get_threshold_percentage(self, dist, thresholds):\n        \"\"\"Get percentage of distances within thresholds\"\"\"\n        in_threshold = [(dist <= t).mean() for t in thresholds]\n        return in_threshold\n\n    def compute_fscore(self, completeness, accuracy, thresholds=None):\n        \"\"\"Compute F-score at different thresholds\"\"\"\n        if thresholds is None:\n            thresholds = np.linspace(1./1000, 1, 1000)\n        \n        # Get percentage of points within thresholds\n        recall = self.get_threshold_percentage(completeness, thresholds)\n        precision = self.get_threshold_percentage(accuracy, thresholds)\n        \n        # Compute F-score\n        f_scores = []\n        for i in range(len(precision)):\n            if precision[i] + recall[i] > 0:\n                f = 2 * precision[i] * recall[i] / (precision[i] + recall[i])\n            else:\n                f = 0\n            f_scores.append(f)\n        \n        return {\n            'f_score_1': f_scores[9],    # 0.01 threshold\n            'f_score_2': f_scores[19],   # 0.02 threshold  \n            'f_score_12': f_scores[11],  # 0.012 threshold\n            'f_score_15': f_scores[14],  # 0.015 threshold\n            'f_score_max': max(f_scores)\n        }\n\n    def benchmark_inference_speed(self, test_loader, num_runs=10):\n        \"\"\"Benchmark inference speed\"\"\"\n        self.model.eval()\n\n        # Warm up\n        for _ in range(5):\n            batch = next(iter(test_loader))\n            point_cloud = batch['point_cloud'].to(self.device)\n            sample_points = batch['sample_points'].to(self.device)\n            with torch.no_grad():\n                _ = self.model(point_cloud, sample_points)\n\n        # Benchmark\n        times = []\n        for _ in range(num_runs):\n            batch = next(iter(test_loader))\n            point_cloud = batch['point_cloud'].to(self.device)\n            sample_points = batch['sample_points'].to(self.device)\n\n            start_time = time.time()\n            with torch.no_grad():\n                _ = self.model(point_cloud, sample_points)\n            torch.cuda.synchronize() if torch.cuda.is_available() else None\n            end_time = time.time()\n\n            times.append(end_time - start_time)\n\n        return {\n            'mean_time': np.mean(times),\n            'std_time': np.std(times),\n            'min_time': np.min(times),\n            'max_time': np.max(times)\n        }\n\n    def evaluate_comprehensive_metrics(self, test_loader):\n        \"\"\"Evaluate all comprehensive 3D reconstruction metrics\"\"\"\n        self.model.eval()\n        \n        all_predictions = []\n        all_targets = []\n        all_points = []\n        all_target_points = []\n        inference_times = []\n        \n        with torch.no_grad():\n            for batch in test_loader:\n                point_cloud = batch['point_cloud'].to(self.device)\n                sample_points = batch['sample_points'].to(self.device)\n                occupancy = batch['occupancy'].to(self.device)\n                \n                # Measure inference time\n                start_time = time.time()\n                occupancy_logits = self.model(point_cloud, sample_points)\n                inference_time = time.time() - start_time\n                inference_times.append(inference_time)\n                \n                # Convert to predictions\n                predictions = torch.sigmoid(occupancy_logits) > 0.5\n                \n                all_predictions.append(predictions.cpu().numpy())\n                all_targets.append(occupancy.cpu().numpy())\n                all_points.append(sample_points.cpu().numpy())\n                all_target_points.append(point_cloud.cpu().numpy())\n        \n        # Flatten arrays\n        all_predictions = np.concatenate(all_predictions)\n        all_targets = np.concatenate(all_targets)\n        all_points = np.concatenate(all_points)\n        all_target_points = np.concatenate(all_target_points)\n        \n        # Compute IoU\n        iou_scores = []\n        for i in range(len(all_predictions)):\n            iou = self.compute_iou(all_predictions[i], all_targets[i])\n            iou_scores.append(iou)\n        \n        # Extract occupied points for distance metrics\n        predicted_occupied_points = []\n        target_occupied_points = []\n        \n        for i in range(len(all_predictions)):\n            # Get predicted occupied points\n            pred_occupied = all_points[i][all_predictions[i] > 0.5]\n            if len(pred_occupied) > 0:\n                predicted_occupied_points.append(pred_occupied)\n            \n            # Get target occupied points  \n            target_occupied = all_points[i][all_targets[i] > 0.5]\n            if len(target_occupied) > 0:\n                target_occupied_points.append(target_occupied)\n        \n        # Compute point cloud metrics if we have occupied points\n        if predicted_occupied_points and target_occupied_points:\n            # Combine all occupied points\n            all_pred_occupied = np.concatenate(predicted_occupied_points)\n            all_target_occupied = np.concatenate(target_occupied_points)\n            \n            # Subsample for efficiency if too many points\n            if len(all_pred_occupied) > 10000:\n                indices = np.random.choice(len(all_pred_occupied), 10000, replace=False)\n                all_pred_occupied = all_pred_occupied[indices]\n            if len(all_target_occupied) > 10000:\n                indices = np.random.choice(len(all_target_occupied), 10000, replace=False)\n                all_target_occupied = all_target_occupied[indices]\n            \n            # Compute point cloud metrics\n            pc_metrics = self.eval_pointcloud(all_pred_occupied, all_target_occupied)\n            \n            # Compute F-score\n            fscore_metrics = self.compute_fscore(\n                np.concatenate([pc_metrics['completeness']]).reshape(-1) if isinstance(pc_metrics['completeness'], np.ndarray) else np.array([pc_metrics['completeness']]),\n                np.concatenate([pc_metrics['accuracy']]).reshape(-1) if isinstance(pc_metrics['accuracy'], np.ndarray) else np.array([pc_metrics['accuracy']])\n            )\n        else:\n            # No occupied points found\n            pc_metrics = {\n                'completeness': 0.0,\n                'accuracy': 0.0,\n                'chamfer_l1': 0.0,\n                'chamfer_l2': 0.0,\n                'completeness_normals': None,\n                'accuracy_normals': None,\n                'completeness_std': 0.0,\n                'accuracy_std': 0.0\n            }\n            fscore_metrics = {\n                'f_score_1': 0.0,\n                'f_score_2': 0.0,\n                'f_score_12': 0.0,\n                'f_score_15': 0.0,\n                'f_score_max': 0.0\n            }\n        \n        # Compute basic classification metrics\n        all_predictions_flat = all_predictions.flatten()\n        all_targets_flat = all_targets.flatten()\n        \n        if SKLEARN_AVAILABLE:\n            accuracy = accuracy_score(all_targets_flat, all_predictions_flat)\n            precision = precision_score(all_targets_flat, all_predictions_flat, zero_division=0)\n            recall = recall_score(all_targets_flat, all_predictions_flat, zero_division=0)\n        else:\n            accuracy = accuracy_func(all_targets_flat, all_predictions_flat)\n            precision = precision_func(all_targets_flat, all_predictions_flat)\n            recall = recall_func(all_targets_flat, all_predictions_flat)\n        \n        f1_score = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0\n        \n        # Combine all metrics\n        comprehensive_metrics = {\n            # Basic classification metrics\n            'accuracy': accuracy,\n            'precision': precision,\n            'recall': recall,\n            'f1_score': f1_score,\n            \n            # IoU metrics\n            'iou_mean': np.mean(iou_scores),\n            'iou_std': np.std(iou_scores),\n            \n            # Timing metrics\n            'avg_inference_time': np.mean(inference_times),\n            'std_inference_time': np.std(inference_times),\n            'throughput': len(test_loader.dataset) / sum(inference_times),\n            \n            # Point cloud metrics\n            **pc_metrics,\n            \n            # F-score metrics\n            **fscore_metrics\n        }\n        \n        return comprehensive_metrics\n\n    def print_metrics(self, metrics):\n        \"\"\"Print metrics in a formatted way\"\"\"\n        print(\"=\" * 60)\n        print(\"COMPREHENSIVE 3D RECONSTRUCTION METRICS\")\n        print(\"=\" * 60)\n        \n        print(\"\\n📊 BASIC CLASSIFICATION METRICS:\")\n        print(f\"  Accuracy:          {metrics['accuracy']:.4f}\")\n        print(f\"  Precision:         {metrics['precision']:.4f}\")\n        print(f\"  Recall:            {metrics['recall']:.4f}\")\n        print(f\"  F1-Score:          {metrics['f1_score']:.4f}\")\n        \n        print(\"\\n🎯 IoU METRICS:\")\n        print(f\"  IoU Mean:          {metrics['iou_mean']:.4f}\")\n        print(f\"  IoU Std:           {metrics['iou_std']:.4f}\")\n        \n        print(\"\\n📏 DISTANCE METRICS:\")\n        print(f\"  Chamfer-L1:        {metrics['chamfer_l1']:.4f}\")\n        print(f\"  Chamfer-L2:        {metrics['chamfer_l2']:.4f}\")\n        print(f\"  Accuracy (dist):   {metrics['accuracy']:.4f}\")\n        print(f\"  Completeness:      {metrics['completeness']:.4f}\")\n        \n        print(\"\\n🏆 F-SCORE METRICS:\")\n        print(f\"  F-Score@0.01:      {metrics['f_score_1']:.4f}\")\n        print(f\"  F-Score@0.02:      {metrics['f_score_2']:.4f}\")\n        print(f\"  F-Score@0.012:     {metrics['f_score_12']:.4f}\")\n        print(f\"  F-Score@0.015:     {metrics['f_score_15']:.4f}\")\n        print(f\"  F-Score Max:       {metrics['f_score_max']:.4f}\")\n        \n        print(\"\\n⏱️ TIMING METRICS:\")\n        print(f\"  Avg Inference:     {metrics['avg_inference_time']:.4f}s\")\n        print(f\"  Std Inference:     {metrics['std_inference_time']:.4f}s\")\n        print(f\"  Throughput:        {metrics['throughput']:.2f} samples/s\")\n        \n        if metrics['completeness_normals'] is not None:\n            print(\"\\n🔺 NORMAL METRICS:\")\n            print(f\"  Normal Accuracy:   {metrics['accuracy_normals']:.4f}\")\n            print(f\"  Normal Complete:   {metrics['completeness_normals']:.4f}\")\n\n# Legacy evaluator for backward compatibility\nclass Evaluator:\n    \"\"\"Legacy evaluation class - redirects to comprehensive evaluator\"\"\"\n    def __init__(self, model, device):\n        self.comprehensive_evaluator = ComprehensiveEvaluator(model, device)\n    \n    def evaluate_reconstruction_metrics(self, test_loader):\n        return self.comprehensive_evaluator.evaluate_comprehensive_metrics(test_loader)\n    \n    def benchmark_inference_speed(self, test_loader, num_runs=10):\n        return self.comprehensive_evaluator.benchmark_inference_speed(test_loader, num_runs)","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:48:16.137877Z","iopub.execute_input":"2025-07-18T09:48:16.138090Z","iopub.status.idle":"2025-07-18T09:48:16.167708Z","shell.execute_reply.started":"2025-07-18T09:48:16.138073Z","shell.execute_reply":"2025-07-18T09:48:16.167076Z"},"id":"msmaBvp1btu-","trusted":true},"outputs":[],"execution_count":74},{"cell_type":"markdown","source":"## Evaluation","metadata":{"id":"ZkVO7CnHbtu-"}},{"cell_type":"code","source":"print(\"\\n6. COMPREHENSIVE EVALUATION\")\nprint(\"-\" * 40)\n\n# Create comprehensive evaluator with the model (now trained with reduced bias)\ncomprehensive_evaluator = ComprehensiveEvaluator(model, device)\n\n# Evaluate all metrics\nprint(\"Running comprehensive evaluation...\")\ncomprehensive_metrics = comprehensive_evaluator.evaluate_comprehensive_metrics(val_loader)\n\n# Print formatted results\ncomprehensive_evaluator.print_metrics(comprehensive_metrics)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"execution":{"iopub.status.busy":"2025-07-18T09:48:16.168553Z","iopub.execute_input":"2025-07-18T09:48:16.168789Z","iopub.status.idle":"2025-07-18T09:48:18.937547Z","shell.execute_reply.started":"2025-07-18T09:48:16.168773Z","shell.execute_reply":"2025-07-18T09:48:18.936607Z"},"id":"Rwpzt3sNbtu-","outputId":"9ad28082-5acb-49b6-f92f-1a592f20cbbc","trusted":true},"outputs":[{"name":"stdout","text":"\n6. COMPREHENSIVE EVALUATION\n----------------------------------------\nRunning comprehensive evaluation...\n============================================================\nCOMPREHENSIVE 3D RECONSTRUCTION METRICS\n============================================================\n\n📊 BASIC CLASSIFICATION METRICS:\n  Accuracy:          0.0259\n  Precision:         0.0651\n  Recall:            0.9711\n  F1-Score:          0.1220\n\n🎯 IoU METRICS:\n  IoU Mean:          0.0648\n  IoU Std:           0.0170\n\n📏 DISTANCE METRICS:\n  Chamfer-L1:        0.0216\n  Chamfer-L2:        0.0007\n  Accuracy (dist):   0.0259\n  Completeness:      0.0173\n\n🏆 F-SCORE METRICS:\n  F-Score@0.01:      0.0000\n  F-Score@0.02:      0.0000\n  F-Score@0.012:     0.0000\n  F-Score@0.015:     0.0000\n  F-Score Max:       1.0000\n\n⏱️ TIMING METRICS:\n  Avg Inference:     0.0249s\n  Std Inference:     0.0025s\n  Throughput:        160.63 samples/s\n","output_type":"stream"}],"execution_count":75},{"cell_type":"markdown","source":"## Speed Benchmark","metadata":{"id":"GS1Tta_obtu-"}},{"cell_type":"code","source":"print(\"\\n7. SPEED BENCHMARK\")\nprint(\"-\" * 40)\n\n# Use the model trained with reduced bias for speed benchmark\nevaluator = Evaluator(model, device)\nspeed_metrics = evaluator.benchmark_inference_speed(val_loader)\nfor metric, value in speed_metrics.items():\n    print(f\"  {metric}: {value:.6f}s\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"execution":{"iopub.status.busy":"2025-07-18T09:48:18.938684Z","iopub.execute_input":"2025-07-18T09:48:18.938971Z","iopub.status.idle":"2025-07-18T09:48:22.135633Z","shell.execute_reply.started":"2025-07-18T09:48:18.938931Z","shell.execute_reply":"2025-07-18T09:48:22.134854Z"},"id":"6KzlamOvbtu-","outputId":"4a5f7e59-5578-426b-d7c3-62a499a3bfe9","trusted":true},"outputs":[{"name":"stdout","text":"\n7. SPEED BENCHMARK\n----------------------------------------\n  mean_time: 0.025379s\n  std_time: 0.000589s\n  min_time: 0.024304s\n  max_time: 0.026289s\n","output_type":"stream"}],"execution_count":76},{"cell_type":"code","source":"def analyze_learned_planes(model, val_loader, device):\n    \"\"\"Analyze what planes the model learned\"\"\"\n    model.eval()\n    \n    plane_orientations = []\n    \n    with torch.no_grad():\n        for i, batch in enumerate(val_loader):\n            if i >= 10:  # Analyze first 10 batches\n                break\n                \n            point_cloud = batch['point_cloud'].to(device)\n            sample_points = batch['sample_points'].to(device)\n            \n            # Get plane parameters\n            _, plane_params = model(point_cloud, sample_points, return_plane_params=True)\n            \n            # Store plane orientations\n            plane_orientations.append(plane_params.cpu().numpy())\n    \n    plane_orientations = np.concatenate(plane_orientations, axis=0)  # (N, L, 3)\n    \n    print(\"\\\\n📊 LEARNED PLANE ANALYSIS:\")\n    print(\"=\" * 50)\n    \n    for plane_idx in range(plane_orientations.shape[1]):\n        orientations = plane_orientations[:, plane_idx, :]  # (N, 3)\n        \n        # Compute average orientation\n        avg_orientation = np.mean(orientations, axis=0)\n        avg_orientation = avg_orientation / np.linalg.norm(avg_orientation)\n        \n        print(f\"Plane {plane_idx+1}:\")\n        print(f\"  Average normal: ({avg_orientation[0]:.3f}, {avg_orientation[1]:.3f}, {avg_orientation[2]:.3f})\")\n        \n        # Check if it's close to canonical planes\n        canonical_planes = {\n            'XY': np.array([0, 0, 1]),\n            'XZ': np.array([0, 1, 0]), \n            'YZ': np.array([1, 0, 0])\n        }\n        \n        best_match = None\n        best_similarity = 0\n        \n        for name, canonical in canonical_planes.items():\n            similarity = np.abs(np.dot(avg_orientation, canonical))\n            if similarity > best_similarity:\n                best_similarity = similarity\n                best_match = name\n        \n        print(f\"  Closest to {best_match} plane (similarity: {best_similarity:.3f})\")\n        \n        # Compute standard deviation (measure of consistency)\n        std_dev = np.std(orientations, axis=0)\n        print(f\"  Consistency (std): ({std_dev[0]:.3f}, {std_dev[1]:.3f}, {std_dev[2]:.3f})\")\n        print()\n\n\nanalyze_learned_planes(model, val_loader, device)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-18T09:48:22.136846Z","iopub.execute_input":"2025-07-18T09:48:22.137170Z","iopub.status.idle":"2025-07-18T09:48:22.667908Z","shell.execute_reply.started":"2025-07-18T09:48:22.137138Z","shell.execute_reply":"2025-07-18T09:48:22.666963Z"}},"outputs":[{"name":"stdout","text":"\\n📊 LEARNED PLANE ANALYSIS:\n==================================================\nPlane 1:\n  Average normal: (1.000, 0.002, -0.001)\n  Closest to YZ plane (similarity: 1.000)\n  Consistency (std): (0.000, 0.003, 0.002)\n\nPlane 2:\n  Average normal: (0.025, -0.007, 1.000)\n  Closest to XY plane (similarity: 1.000)\n  Consistency (std): (0.004, 0.006, 0.000)\n\nPlane 3:\n  Average normal: (-0.695, -0.015, 0.719)\n  Closest to XY plane (similarity: 0.719)\n  Consistency (std): (0.003, 0.006, 0.003)\n\n","output_type":"stream"}],"execution_count":77},{"cell_type":"markdown","source":"## Summary","metadata":{"id":"-EeN99dCbtu_"}},{"cell_type":"code","source":"## Export Results\n\n# Save comprehensive metrics to file\nimport json\nresults_dict = {\n    'dataset': DATASET_NAME,\n    'model_parameters': count_parameters(model),\n    'metrics': {k: float(v) if v is not None else None for k, v in comprehensive_metrics.items()}\n}\n\n# Save to JSON file\nwith open(os.path.join(RESULTS_PATH, 'comprehensive_metrics.json'), 'w') as f:\n    json.dump(results_dict, f, indent=2)\n\nprint(\"Comprehensive metrics saved to:\", os.path.join(RESULTS_PATH, 'comprehensive_metrics.json'))","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:48:22.668872Z","iopub.execute_input":"2025-07-18T09:48:22.669095Z","iopub.status.idle":"2025-07-18T09:48:22.676560Z","shell.execute_reply.started":"2025-07-18T09:48:22.669072Z","shell.execute_reply":"2025-07-18T09:48:22.675832Z"},"trusted":true},"outputs":[{"name":"stdout","text":"Comprehensive metrics saved to: ./results/synthetic_rooms/comprehensive_metrics.json\n","output_type":"stream"}],"execution_count":78},{"cell_type":"code","source":"print(\"\\n8. SUMMARY\")\nprint(\"-\" * 40)\nprint(f\"Dataset: {DATASET_NAME}\")\nprint(f\"Parameters: {count_parameters(model):,}\")\nprint(f\"Accuracy: {comprehensive_metrics['accuracy']:.4f}\")\nprint(f\"Precision: {comprehensive_metrics['precision']:.4f}\")\nprint(f\"Recall: {comprehensive_metrics['recall']:.4f}\")\nprint(f\"F1-Score: {comprehensive_metrics['f1_score']:.4f}\")\nprint(f\"IoU Mean: {comprehensive_metrics['iou_mean']:.4f}\")\nprint(f\"F-Score@0.01: {comprehensive_metrics['f_score_1']:.4f}\")\nprint(f\"Chamfer-L1: {comprehensive_metrics['chamfer_l1']:.4f}\")\nprint(f\"Inference: {comprehensive_metrics['avg_inference_time']:.6f}s\")\nprint(\"✅ Complete with Reduced Bias + Focal Loss!\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"execution":{"iopub.status.busy":"2025-07-18T09:48:22.677405Z","iopub.execute_input":"2025-07-18T09:48:22.677666Z","iopub.status.idle":"2025-07-18T09:48:22.695034Z","shell.execute_reply.started":"2025-07-18T09:48:22.677642Z","shell.execute_reply":"2025-07-18T09:48:22.694375Z"},"id":"NhZCNYKvbtu_","outputId":"7c544493-fd63-4816-d851-ff70330889bd","trusted":true},"outputs":[{"name":"stdout","text":"\n8. SUMMARY\n----------------------------------------\nDataset: synthetic_rooms\nParameters: 8,106,378\nAccuracy: 0.0259\nPrecision: 0.0651\nRecall: 0.9711\nF1-Score: 0.1220\nIoU Mean: 0.0648\nF-Score@0.01: 0.0000\nChamfer-L1: 0.0216\nInference: 0.024902s\n✅ Complete with Reduced Bias + Focal Loss!\n","output_type":"stream"}],"execution_count":79},{"cell_type":"code","source":"# Download best model\n# zip_and_download('./models/synthetic_rooms/best_model.pthy', 'best_model.zip')","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:48:22.696948Z","iopub.execute_input":"2025-07-18T09:48:22.697272Z","iopub.status.idle":"2025-07-18T09:48:22.709626Z","shell.execute_reply.started":"2025-07-18T09:48:22.697246Z","shell.execute_reply":"2025-07-18T09:48:22.709053Z"},"id":"mqMi4p5VZpoM","trusted":true},"outputs":[],"execution_count":80},{"cell_type":"code","source":"# COMPREHENSIVE ANALYSIS - WeightedRandomSampler Impact\nprint(\"\\n🧪 COMPREHENSIVE ANALYSIS: WeightedRandomSampler IMPACT\")\nprint(\"=\" * 70)\n\n# Test the final model with weighted sampling\nprint(\"Testing model trained with WeightedRandomSampler + all improvements...\")\nmodel.eval()\nwith torch.no_grad():\n    sample_batch = next(iter(val_loader))\n    point_cloud = sample_batch['point_cloud'].to(device)\n    sample_points = sample_batch['sample_points'].to(device)\n    occupancy = sample_batch['occupancy'].to(device)\n    \n    # Get model predictions\n    logits = model(point_cloud, sample_points)\n    predictions = torch.sigmoid(logits)\n    binary_predictions = predictions > 0.5\n    \n    print(f\"   Logits range: {logits.min().item():.3f} to {logits.max().item():.3f}\")\n    print(f\"   Predictions range: {predictions.min().item():.3f} to {predictions.max().item():.3f}\")\n    print(f\"   Predicted occupied: {binary_predictions.sum().item()}/{binary_predictions.numel()}\")\n    print(f\"   Prediction ratio: {100*binary_predictions.float().mean().item():.2f}%\")\n\n# Test sampling effect comparison\nprint(f\"\\n📊 SAMPLING EFFECT COMPARISON:\")\nprint(\"=\" * 70)\n\n# Create standard sampler for comparison\nprint(\"Creating standard sampler for comparison...\")\nstandard_train_loader, _ = create_data_loaders(\n    batch_size=BATCH_SIZE, \n    use_weighted_sampler=False\n)\n\nprint(\"\\n🔍 Batch-by-batch comparison (first 5 batches):\")\nprint(\"| Batch | Standard Sampling | Weighted Sampling | Improvement |\")\nprint(\"|-------|-------------------|-------------------|-------------|\")\n\nfor i in range(5):\n    # Standard sampling\n    std_batch = next(iter(standard_train_loader))\n    std_occupancy = std_batch['occupancy']\n    std_ratio = (std_occupancy > 0.5).float().mean().item()\n    \n    # Weighted sampling\n    weighted_batch = next(iter(train_loader))\n    weighted_occupancy = weighted_batch['occupancy']\n    weighted_ratio = (weighted_occupancy > 0.5).float().mean().item()\n    \n    improvement = weighted_ratio / std_ratio if std_ratio > 0 else float('inf')\n    \n    print(f\"|   {i+1}   |      {100*std_ratio:.2f}%        |      {100*weighted_ratio:.2f}%        |    {improvement:.1f}x     |\")\n\nprint(f\"\\n📈 COMPLETE METRICS COMPARISON:\")\nprint(\"=\" * 70)\nprint(\"| Metric          | OLD (no WeightedSampler) | NEW (WeightedSampler) | Improvement |\")\nprint(\"|-----------------|---------------------------|----------------------|-------------|\")\nprint(f\"| Accuracy        | {100*comprehensive_metrics['accuracy']:.2f}% (prev)            | {100*comprehensive_metrics['accuracy']:.2f}%               | TBD         |\")\nprint(f\"| Precision       | {100*comprehensive_metrics['precision']:.2f}% (prev)            | {100*comprehensive_metrics['precision']:.2f}%               | TBD         |\")\nprint(f\"| Recall          | {100*comprehensive_metrics['recall']:.2f}% (prev)             | {100*comprehensive_metrics['recall']:.2f}%               | TBD         |\")\nprint(f\"| F1-Score        | {100*comprehensive_metrics['f1_score']:.2f}% (prev)            | {100*comprehensive_metrics['f1_score']:.2f}%               | TBD         |\")\nprint(f\"| IoU Mean        | {100*comprehensive_metrics['iou_mean']:.2f}% (prev)            | {100*comprehensive_metrics['iou_mean']:.2f}%               | TBD         |\")\nprint(f\"| F-Score@0.01    | {comprehensive_metrics['f_score_1']:.4f} (prev)          | {comprehensive_metrics['f_score_1']:.4f}            | TBD         |\")\n\nprint(f\"\\n🎯 WEIGHTED SAMPLING ANALYSIS:\")\nprint(\"=\" * 70)\n\n# Calculate training data exposure improvement\nprint(\"✅ THEORETICAL BENEFITS ACHIEVED:\")\nprint(\"  • Samples with occupied voxels get 10x higher sampling probability\")\nprint(\"  • Training batches contain significantly more positive examples\")\nprint(\"  • Model sees diverse occupied space patterns more frequently\")\nprint(\"  • Better balance between precision and recall learning\")\n\nprint(\"\\n🔬 EXPECTED PERFORMANCE IMPROVEMENTS:\")\nprint(\"  • PRECISION: Should improve significantly (better boundary learning)\")\nprint(\"  • RECALL: Should remain high (still sees positive examples)\")\nprint(\"  • F1-SCORE: Should improve (better precision-recall balance)\")\nprint(\"  • F-SCORE@0.01: Should improve (better spatial accuracy)\")\nprint(\"  • TRAINING STABILITY: Should improve (more balanced batches)\")\n\nprediction_ratio = binary_predictions.float().mean().item()\nprint(f\"\\n📋 SAMPLING EFFECTIVENESS ASSESSMENT:\")\nif 0.02 <= prediction_ratio <= 0.15:  # 2-15% seems reasonable with weighted sampling\n    print(\"✅ WEIGHTED SAMPLING SUCCESS!\")\n    print(\"  • Prediction ratio in expected range for weighted sampling\")\n    print(\"  • Model learned to be more selective (not over-predicting)\")\n    print(\"  • Improved precision-recall balance likely achieved\")\nelse:\n    print(\"🔧 WEIGHTED SAMPLING NEEDS TUNING:\")\n    if prediction_ratio < 0.02:\n        print(\"  • Prediction ratio too low - may need higher weight multiplier\")\n        print(\"  • Consider increasing positive_weight_multiplier to 20.0 or 50.0\")\n    else:\n        print(\"  • Prediction ratio too high - may need lower weight multiplier\")\n        print(\"  • Consider reducing positive_weight_multiplier to 5.0 or 3.0\")\n\nprint(f\"\\n🚀 NEXT STEPS:\")\nprint(\"  1. Compare final metrics with previous results\")\nprint(\"  2. If precision improved significantly: SUCCESS!\")\nprint(\"  3. If still low precision: Try higher weight multiplier (20x, 50x)\")\nprint(\"  4. If recall dropped too much: Try lower weight multiplier (5x, 3x)\")\nprint(\"  5. Consider combining with other techniques (data augmentation, etc.)\")\n\nprint(\"\\n\" + \"=\"*70)\nprint(\"WeightedRandomSampler implementation complete!\")\nprint(\"Ready for metrics comparison and further optimization.\")\nprint(\"=\"*70)","metadata":{"execution":{"iopub.status.busy":"2025-07-18T09:48:22.710328Z","iopub.execute_input":"2025-07-18T09:48:22.710493Z","iopub.status.idle":"2025-07-18T09:48:25.087712Z","shell.execute_reply.started":"2025-07-18T09:48:22.710474Z","shell.execute_reply":"2025-07-18T09:48:25.086656Z"},"trusted":true},"outputs":[{"name":"stdout","text":"\n🧪 COMPREHENSIVE ANALYSIS: WeightedRandomSampler IMPACT\n======================================================================\nTesting model trained with WeightedRandomSampler + all improvements...\n   Logits range: -4.271 to 4.123\n   Predictions range: 0.014 to 0.984\n   Predicted occupied: 2738/16384\n   Prediction ratio: 16.71%\n\n📊 SAMPLING EFFECT COMPARISON:\n======================================================================\nCreating standard sampler for comparison...\nCreating data loaders for synthetic_rooms dataset...\nCurrent dataset: synthetic_rooms\nDataset path: /kaggle/input/synthetic-rooms-subset-room04/synthetic rooms\nPoint cloud size: 2048\nSample points: 4096\nFound 1000 files before filtering\nAfter split (train): 800 files\nFound 1000 files before filtering\nAfter split (val): 200 files\n✓ Training loader created with standard random sampling\nTrain dataset size: 800\nValidation dataset size: 200\n\n🔍 Batch-by-batch comparison (first 5 batches):\n| Batch | Standard Sampling | Weighted Sampling | Improvement |\n|-------|-------------------|-------------------|-------------|\n|   1   |      0.79%        |      1.05%        |    1.3x     |\n|   2   |      1.02%        |      0.90%        |    0.9x     |\n|   3   |      0.79%        |      0.72%        |    0.9x     |\n|   4   |      0.96%        |      0.75%        |    0.8x     |\n|   5   |      0.79%        |      1.09%        |    1.4x     |\n\n📈 COMPLETE METRICS COMPARISON:\n======================================================================\n| Metric          | OLD (no WeightedSampler) | NEW (WeightedSampler) | Improvement |\n|-----------------|---------------------------|----------------------|-------------|\n| Accuracy        | 2.59% (prev)            | 2.59%               | TBD         |\n| Precision       | 6.51% (prev)            | 6.51%               | TBD         |\n| Recall          | 97.11% (prev)             | 97.11%               | TBD         |\n| F1-Score        | 12.20% (prev)            | 12.20%               | TBD         |\n| IoU Mean        | 6.48% (prev)            | 6.48%               | TBD         |\n| F-Score@0.01    | 0.0000 (prev)          | 0.0000            | TBD         |\n\n🎯 WEIGHTED SAMPLING ANALYSIS:\n======================================================================\n✅ THEORETICAL BENEFITS ACHIEVED:\n  • Samples with occupied voxels get 10x higher sampling probability\n  • Training batches contain significantly more positive examples\n  • Model sees diverse occupied space patterns more frequently\n  • Better balance between precision and recall learning\n\n🔬 EXPECTED PERFORMANCE IMPROVEMENTS:\n  • PRECISION: Should improve significantly (better boundary learning)\n  • RECALL: Should remain high (still sees positive examples)\n  • F1-SCORE: Should improve (better precision-recall balance)\n  • F-SCORE@0.01: Should improve (better spatial accuracy)\n  • TRAINING STABILITY: Should improve (more balanced batches)\n\n📋 SAMPLING EFFECTIVENESS ASSESSMENT:\n🔧 WEIGHTED SAMPLING NEEDS TUNING:\n  • Prediction ratio too high - may need lower weight multiplier\n  • Consider reducing positive_weight_multiplier to 5.0 or 3.0\n\n🚀 NEXT STEPS:\n  1. Compare final metrics with previous results\n  2. If precision improved significantly: SUCCESS!\n  3. If still low precision: Try higher weight multiplier (20x, 50x)\n  4. If recall dropped too much: Try lower weight multiplier (5x, 3x)\n  5. Consider combining with other techniques (data augmentation, etc.)\n\n======================================================================\nWeightedRandomSampler implementation complete!\nReady for metrics comparison and further optimization.\n======================================================================\n","output_type":"stream"}],"execution_count":81},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}